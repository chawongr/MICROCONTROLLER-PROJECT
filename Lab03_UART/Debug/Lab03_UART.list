
Lab03_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d54  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a4  080030a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030ac  080030ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ac  080030ac  000130ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080030c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080030c0  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093ac  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016dd  00000000  00000000  00029429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0002ab08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000535  00000000  00000000  0002b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268c6  00000000  00000000  0002b715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d70  00000000  00000000  00051fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0150  00000000  00000000  0005bd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a84  00000000  00000000  0014be9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0014d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002f34 	.word	0x08002f34

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002f34 	.word	0x08002f34

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800055a:	4b29      	ldr	r3, [pc, #164]	; (8000600 <MX_GPIO_Init+0xbc>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a28      	ldr	r2, [pc, #160]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000560:	f043 0320 	orr.w	r3, r3, #32
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b26      	ldr	r3, [pc, #152]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0320 	and.w	r3, r3, #32
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000572:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a22      	ldr	r2, [pc, #136]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000578:	f043 0310 	orr.w	r3, r3, #16
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0310 	and.w	r3, r3, #16
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <MX_GPIO_Init+0xbc>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0308 	and.w	r3, r3, #8
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a8:	4816      	ldr	r0, [pc, #88]	; (8000604 <MX_GPIO_Init+0xc0>)
 80005aa:	f000 fe03 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b4:	4814      	ldr	r0, [pc, #80]	; (8000608 <MX_GPIO_Init+0xc4>)
 80005b6:	f000 fdfd 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	480c      	ldr	r0, [pc, #48]	; (8000604 <MX_GPIO_Init+0xc0>)
 80005d4:	f000 fc42 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_GPIO_Init+0xc4>)
 80005f2:	f000 fc33 	bl	8000e5c <HAL_GPIO_Init>

}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40021400 	.word	0x40021400
 8000608:	40021000 	.word	0x40021000

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b0c8      	sub	sp, #288	; 0x120
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fabc 	bl	8000b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f93f 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f7ff ff93 	bl	8000544 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800061e:	f000 f9fd 	bl	8000a1c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  	 /*============ FOR FOUR ============*/

	 char str[] = "Display Blinking LED PRESS (1, 2)\nDisplay Group Members PRESS m\nQuit PRESS q\n";
 8000622:	4a92      	ldr	r2, [pc, #584]	; (800086c <main+0x260>)
 8000624:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000628:	4611      	mov	r1, r2
 800062a:	224e      	movs	r2, #78	; 0x4e
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fc73 	bl	8002f18 <memcpy>
	 char inp[] = "        Input => ";
 8000632:	4b8f      	ldr	r3, [pc, #572]	; (8000870 <main+0x264>)
 8000634:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000638:	461d      	mov	r5, r3
 800063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063e:	682b      	ldr	r3, [r5, #0]
 8000640:	8023      	strh	r3, [r4, #0]

   	 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000642:	bf00      	nop
 8000644:	4b8b      	ldr	r3, [pc, #556]	; (8000874 <main+0x268>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064e:	2b40      	cmp	r3, #64	; 0x40
 8000650:	d1f8      	bne.n	8000644 <main+0x38>
   	 HAL_UART_Transmit(&huart3, (uint8_t*)str,strlen(str),1000);
 8000652:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fdee 	bl	8000238 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000668:	4882      	ldr	r0, [pc, #520]	; (8000874 <main+0x268>)
 800066a:	f001 fec7 	bl	80023fc <HAL_UART_Transmit>

    /* USER CODE BEGIN 3 */

	 /*=========== THREE ===========*/

	 char str[] = "Input => ";
 800066e:	4a82      	ldr	r2, [pc, #520]	; (8000878 <main+0x26c>)
 8000670:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000674:	ca07      	ldmia	r2, {r0, r1, r2}
 8000676:	c303      	stmia	r3!, {r0, r1}
 8000678:	801a      	strh	r2, [r3, #0]
	 char ch1;

	 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800067a:	bf00      	nop
 800067c:	4b7d      	ldr	r3, [pc, #500]	; (8000874 <main+0x268>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000686:	2b40      	cmp	r3, #64	; 0x40
 8000688:	d1f8      	bne.n	800067c <main+0x70>
	 HAL_UART_Transmit(&huart3, (uint8_t*)str,strlen(str),1000);
 800068a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fdd2 	bl	8000238 <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800069c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a0:	4874      	ldr	r0, [pc, #464]	; (8000874 <main+0x268>)
 80006a2:	f001 feab 	bl	80023fc <HAL_UART_Transmit>

	 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)==RESET){}
 80006a6:	bf00      	nop
 80006a8:	4b72      	ldr	r3, [pc, #456]	; (8000874 <main+0x268>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 0320 	and.w	r3, r3, #32
 80006b2:	2b20      	cmp	r3, #32
 80006b4:	d1f8      	bne.n	80006a8 <main+0x9c>
	 HAL_UART_Receive(&huart3, (uint8_t*)&ch1,1,1000);
 80006b6:	f107 01a7 	add.w	r1, r7, #167	; 0xa7
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	2201      	movs	r2, #1
 80006c0:	486c      	ldr	r0, [pc, #432]	; (8000874 <main+0x268>)
 80006c2:	f001 ff1e 	bl	8002502 <HAL_UART_Receive>
	 HAL_UART_Transmit(&huart3, (uint8_t*)&ch1,1,1000);
 80006c6:	f107 01a7 	add.w	r1, r7, #167	; 0xa7
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	2201      	movs	r2, #1
 80006d0:	4868      	ldr	r0, [pc, #416]	; (8000874 <main+0x268>)
 80006d2:	f001 fe93 	bl	80023fc <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart3, (uint8_t*)"\n",1,1000);
 80006d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006da:	2201      	movs	r2, #1
 80006dc:	4967      	ldr	r1, [pc, #412]	; (800087c <main+0x270>)
 80006de:	4865      	ldr	r0, [pc, #404]	; (8000874 <main+0x268>)
 80006e0:	f001 fe8c 	bl	80023fc <HAL_UART_Transmit>

	 if(ch1=='q')
 80006e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80006e8:	2b71      	cmp	r3, #113	; 0x71
 80006ea:	d107      	bne.n	80006fc <main+0xf0>
	 {
		 HAL_UART_Transmit(&huart3, (uint8_t*)"QUIT",4,1000);
 80006ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f0:	2204      	movs	r2, #4
 80006f2:	4963      	ldr	r1, [pc, #396]	; (8000880 <main+0x274>)
 80006f4:	485f      	ldr	r0, [pc, #380]	; (8000874 <main+0x268>)
 80006f6:	f001 fe81 	bl	80023fc <HAL_UART_Transmit>
		 break;
 80006fa:	e0b0      	b.n	800085e <main+0x252>
	 }

	 /*============ FOUR ============*/

	 char command;
	 char memberInfo[] = "           64010154\n           CHANIDAPA WONGTEP\n           64010965\n           ANAWIN THAMJAROENTIP\n           64011041\n           KITTAPORN BURIYAMEATHAKUL\n";
 80006fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000700:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000704:	4a5f      	ldr	r2, [pc, #380]	; (8000884 <main+0x278>)
 8000706:	4618      	mov	r0, r3
 8000708:	4611      	mov	r1, r2
 800070a:	239f      	movs	r3, #159	; 0x9f
 800070c:	461a      	mov	r2, r3
 800070e:	f002 fc03 	bl	8002f18 <memcpy>

	 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000712:	bf00      	nop
 8000714:	4b57      	ldr	r3, [pc, #348]	; (8000874 <main+0x268>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071e:	2b40      	cmp	r3, #64	; 0x40
 8000720:	d1f8      	bne.n	8000714 <main+0x108>
	 HAL_UART_Transmit(&huart3, (uint8_t*)inp,strlen(inp),1000);
 8000722:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd86 	bl	8000238 <strlen>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000738:	484e      	ldr	r0, [pc, #312]	; (8000874 <main+0x268>)
 800073a:	f001 fe5f 	bl	80023fc <HAL_UART_Transmit>

	 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)==RESET){}
 800073e:	bf00      	nop
 8000740:	4b4c      	ldr	r3, [pc, #304]	; (8000874 <main+0x268>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	2b20      	cmp	r3, #32
 800074c:	d1f8      	bne.n	8000740 <main+0x134>
	 HAL_UART_Receive(&huart3, (uint8_t*)&command,1,1000);
 800074e:	f107 01a6 	add.w	r1, r7, #166	; 0xa6
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	2201      	movs	r2, #1
 8000758:	4846      	ldr	r0, [pc, #280]	; (8000874 <main+0x268>)
 800075a:	f001 fed2 	bl	8002502 <HAL_UART_Receive>
	 HAL_UART_Transmit(&huart3, (uint8_t*)&command,1,1000);
 800075e:	f107 01a6 	add.w	r1, r7, #166	; 0xa6
 8000762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000766:	2201      	movs	r2, #1
 8000768:	4842      	ldr	r0, [pc, #264]	; (8000874 <main+0x268>)
 800076a:	f001 fe47 	bl	80023fc <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart3, (uint8_t*)"\n",1,1000);
 800076e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000772:	2201      	movs	r2, #1
 8000774:	4941      	ldr	r1, [pc, #260]	; (800087c <main+0x270>)
 8000776:	483f      	ldr	r0, [pc, #252]	; (8000874 <main+0x268>)
 8000778:	f001 fe40 	bl	80023fc <HAL_UART_Transmit>

	 if(command=='1')
 800077c:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000780:	2b31      	cmp	r3, #49	; 0x31
 8000782:	d121      	bne.n	80007c8 <main+0x1bc>
	 {
		 for(int i=0;i<3;i++)
 8000784:	2300      	movs	r3, #0
 8000786:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800078a:	e018      	b.n	80007be <main+0x1b2>
		 {
			 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	483d      	ldr	r0, [pc, #244]	; (8000888 <main+0x27c>)
 8000794:	f000 fd0e 	bl	80011b4 <HAL_GPIO_WritePin>
			 HAL_Delay(300);
 8000798:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800079c:	f000 fa54 	bl	8000c48 <HAL_Delay>
			 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a6:	4838      	ldr	r0, [pc, #224]	; (8000888 <main+0x27c>)
 80007a8:	f000 fd04 	bl	80011b4 <HAL_GPIO_WritePin>
			 HAL_Delay(300);
 80007ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007b0:	f000 fa4a 	bl	8000c48 <HAL_Delay>
		 for(int i=0;i<3;i++)
 80007b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007b8:	3301      	adds	r3, #1
 80007ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80007be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	dde2      	ble.n	800078c <main+0x180>
 80007c6:	e752      	b.n	800066e <main+0x62>
		 }
	 }
	 else if(command=='2')
 80007c8:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80007cc:	2b32      	cmp	r3, #50	; 0x32
 80007ce:	d121      	bne.n	8000814 <main+0x208>
	 	 {
	 		 for(int i=0;i<3;i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80007d6:	e018      	b.n	800080a <main+0x1fe>
	 		 {
	 			 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007de:	482b      	ldr	r0, [pc, #172]	; (800088c <main+0x280>)
 80007e0:	f000 fce8 	bl	80011b4 <HAL_GPIO_WritePin>
	 			 HAL_Delay(300);
 80007e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007e8:	f000 fa2e 	bl	8000c48 <HAL_Delay>
	 			 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f2:	4826      	ldr	r0, [pc, #152]	; (800088c <main+0x280>)
 80007f4:	f000 fcde 	bl	80011b4 <HAL_GPIO_WritePin>
	 			 HAL_Delay(300);
 80007f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007fc:	f000 fa24 	bl	8000c48 <HAL_Delay>
	 		 for(int i=0;i<3;i++)
 8000800:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000804:	3301      	adds	r3, #1
 8000806:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800080a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800080e:	2b02      	cmp	r3, #2
 8000810:	dde2      	ble.n	80007d8 <main+0x1cc>
 8000812:	e72c      	b.n	800066e <main+0x62>
	 		 }
	 	 }
	 else if(command=='m')
 8000814:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000818:	2b6d      	cmp	r3, #109	; 0x6d
 800081a:	d10c      	bne.n	8000836 <main+0x22a>
	 {
		 HAL_UART_Transmit(&huart3, (uint8_t*)memberInfo,strlen(memberInfo),1000);
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fd0a 	bl	8000238 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	1d39      	adds	r1, r7, #4
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	4811      	ldr	r0, [pc, #68]	; (8000874 <main+0x268>)
 8000830:	f001 fde4 	bl	80023fc <HAL_UART_Transmit>
 8000834:	e71b      	b.n	800066e <main+0x62>
	 }
	 else if(command=='q')
 8000836:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800083a:	2b71      	cmp	r3, #113	; 0x71
 800083c:	d107      	bne.n	800084e <main+0x242>
	 {
		 HAL_UART_Transmit(&huart3, (uint8_t*)"Quit",4,1000);
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	2204      	movs	r2, #4
 8000844:	4912      	ldr	r1, [pc, #72]	; (8000890 <main+0x284>)
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <main+0x268>)
 8000848:	f001 fdd8 	bl	80023fc <HAL_UART_Transmit>
		 break;
 800084c:	e007      	b.n	800085e <main+0x252>
	 }
	 else
	 {
		 HAL_UART_Transmit(&huart3, (uint8_t*)"           Unknown Command\n",27,1000);
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	221b      	movs	r2, #27
 8000854:	490f      	ldr	r1, [pc, #60]	; (8000894 <main+0x288>)
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <main+0x268>)
 8000858:	f001 fdd0 	bl	80023fc <HAL_UART_Transmit>
  {
 800085c:	e707      	b.n	800066e <main+0x62>
 800085e:	2300      	movs	r3, #0
	 }
  }
  /* USER CODE END 3 */
}
 8000860:	4618      	mov	r0, r3
 8000862:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000866:	46bd      	mov	sp, r7
 8000868:	bdb0      	pop	{r4, r5, r7, pc}
 800086a:	bf00      	nop
 800086c:	08002f7c 	.word	0x08002f7c
 8000870:	08002fcc 	.word	0x08002fcc
 8000874:	20000028 	.word	0x20000028
 8000878:	08002fe0 	.word	0x08002fe0
 800087c:	08002f4c 	.word	0x08002f4c
 8000880:	08002f50 	.word	0x08002f50
 8000884:	08002fec 	.word	0x08002fec
 8000888:	40021400 	.word	0x40021400
 800088c:	40021000 	.word	0x40021000
 8000890:	08002f58 	.word	0x08002f58
 8000894:	08002f60 	.word	0x08002f60

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2234      	movs	r2, #52	; 0x34
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fb09 	bl	8002ebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <SystemClock_Config+0xb0>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a21      	ldr	r2, [pc, #132]	; (8000948 <SystemClock_Config+0xb0>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <SystemClock_Config+0xb0>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <SystemClock_Config+0xb4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <SystemClock_Config+0xb4>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <SystemClock_Config+0xb4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f4:	2301      	movs	r3, #1
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f8:	2310      	movs	r3, #16
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fc6f 	bl	80011e8 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000910:	f000 f81e 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f000 ff08 	bl	8001744 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800093a:	f000 f809 	bl	8000950 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3750      	adds	r7, #80	; 0x50
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x44>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f90a 	bl	8000c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a22:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <MX_USART3_UART_Init+0x5c>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a60:	f001 fc7e 	bl	8002360 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a6a:	f7ff ff71 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000028 	.word	0x20000028
 8000a78:	40004800 	.word	0x40004800

08000a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0ae      	sub	sp, #184	; 0xb8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2290      	movs	r2, #144	; 0x90
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fa0e 	bl	8002ebe <memset>
  if(uartHandle->Instance==USART3)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <HAL_UART_MspInit+0xb4>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d13c      	bne.n	8000b26 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 f828 	bl	8001b10 <HAL_RCCEx_PeriphCLKConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ac6:	f7ff ff43 	bl	8000950 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_UART_MspInit+0xb8>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_UART_MspInit+0xb8>)
 8000ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_UART_MspInit+0xb8>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_UART_MspInit+0xb8>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <HAL_UART_MspInit+0xb8>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_UART_MspInit+0xb8>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000afa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b14:	2307      	movs	r3, #7
 8000b16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <HAL_UART_MspInit+0xbc>)
 8000b22:	f000 f99b 	bl	8000e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b26:	bf00      	nop
 8000b28:	37b8      	adds	r7, #184	; 0xb8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40004800 	.word	0x40004800
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020c00 	.word	0x40020c00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b42:	490e      	ldr	r1, [pc, #56]	; (8000b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b58:	4c0b      	ldr	r4, [pc, #44]	; (8000b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b66:	f7ff ff47 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f002 f9b1 	bl	8002ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fd4d 	bl	800060c <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b80:	080030b4 	.word	0x080030b4
  ldr r2, =_sbss
 8000b84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b88:	200000b4 	.word	0x200000b4

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>

08000b8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b92:	2003      	movs	r0, #3
 8000b94:	f000 f92e 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b98:	200f      	movs	r0, #15
 8000b9a:	f000 f805 	bl	8000ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9e:	f7ff fedd 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_InitTick+0x54>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_InitTick+0x58>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f93b 	bl	8000e42 <HAL_SYSTICK_Config>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00e      	b.n	8000bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	d80a      	bhi.n	8000bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be4:	f000 f911 	bl	8000e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be8:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <HAL_InitTick+0x5c>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e000      	b.n	8000bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000004 	.word	0x20000004

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	200000b0 	.word	0x200000b0

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	200000b0 	.word	0x200000b0

08000c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	f7ff ffee 	bl	8000c30 <HAL_GetTick>
 8000c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c60:	d005      	beq.n	8000c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_Delay+0x44>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6e:	bf00      	nop
 8000c70:	f7ff ffde 	bl	8000c30 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d8f7      	bhi.n	8000c70 <HAL_Delay+0x28>
  {
  }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00
 8000cd4:	05fa0000 	.word	0x05fa0000

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd4:	f7ff ff8e 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff47 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff5c 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff8e 	bl	8000d48 <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5d 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffb0 	bl	8000db0 <SysTick_Config>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	e175      	b.n	8001168 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	f040 8164 	bne.w	8001162 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d005      	beq.n	8000eb2 <HAL_GPIO_Init+0x56>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d130      	bne.n	8000f14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 0201 	and.w	r2, r3, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d017      	beq.n	8000f50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d123      	bne.n	8000fa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	69b9      	ldr	r1, [r7, #24]
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0203 	and.w	r2, r3, #3
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80be 	beq.w	8001162 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b66      	ldr	r3, [pc, #408]	; (8001180 <HAL_GPIO_Init+0x324>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a65      	ldr	r2, [pc, #404]	; (8001180 <HAL_GPIO_Init+0x324>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b63      	ldr	r3, [pc, #396]	; (8001180 <HAL_GPIO_Init+0x324>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ffe:	4a61      	ldr	r2, [pc, #388]	; (8001184 <HAL_GPIO_Init+0x328>)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a58      	ldr	r2, [pc, #352]	; (8001188 <HAL_GPIO_Init+0x32c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d037      	beq.n	800109a <HAL_GPIO_Init+0x23e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a57      	ldr	r2, [pc, #348]	; (800118c <HAL_GPIO_Init+0x330>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d031      	beq.n	8001096 <HAL_GPIO_Init+0x23a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a56      	ldr	r2, [pc, #344]	; (8001190 <HAL_GPIO_Init+0x334>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d02b      	beq.n	8001092 <HAL_GPIO_Init+0x236>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a55      	ldr	r2, [pc, #340]	; (8001194 <HAL_GPIO_Init+0x338>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d025      	beq.n	800108e <HAL_GPIO_Init+0x232>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a54      	ldr	r2, [pc, #336]	; (8001198 <HAL_GPIO_Init+0x33c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01f      	beq.n	800108a <HAL_GPIO_Init+0x22e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a53      	ldr	r2, [pc, #332]	; (800119c <HAL_GPIO_Init+0x340>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x22a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a52      	ldr	r2, [pc, #328]	; (80011a0 <HAL_GPIO_Init+0x344>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x226>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a51      	ldr	r2, [pc, #324]	; (80011a4 <HAL_GPIO_Init+0x348>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x222>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a50      	ldr	r2, [pc, #320]	; (80011a8 <HAL_GPIO_Init+0x34c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x21e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4f      	ldr	r2, [pc, #316]	; (80011ac <HAL_GPIO_Init+0x350>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x21a>
 8001072:	2309      	movs	r3, #9
 8001074:	e012      	b.n	800109c <HAL_GPIO_Init+0x240>
 8001076:	230a      	movs	r3, #10
 8001078:	e010      	b.n	800109c <HAL_GPIO_Init+0x240>
 800107a:	2308      	movs	r3, #8
 800107c:	e00e      	b.n	800109c <HAL_GPIO_Init+0x240>
 800107e:	2307      	movs	r3, #7
 8001080:	e00c      	b.n	800109c <HAL_GPIO_Init+0x240>
 8001082:	2306      	movs	r3, #6
 8001084:	e00a      	b.n	800109c <HAL_GPIO_Init+0x240>
 8001086:	2305      	movs	r3, #5
 8001088:	e008      	b.n	800109c <HAL_GPIO_Init+0x240>
 800108a:	2304      	movs	r3, #4
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x240>
 800108e:	2303      	movs	r3, #3
 8001090:	e004      	b.n	800109c <HAL_GPIO_Init+0x240>
 8001092:	2302      	movs	r3, #2
 8001094:	e002      	b.n	800109c <HAL_GPIO_Init+0x240>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x240>
 800109a:	2300      	movs	r3, #0
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	f002 0203 	and.w	r2, r2, #3
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	4093      	lsls	r3, r2
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010ac:	4935      	ldr	r1, [pc, #212]	; (8001184 <HAL_GPIO_Init+0x328>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <HAL_GPIO_Init+0x354>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010de:	4a34      	ldr	r2, [pc, #208]	; (80011b0 <HAL_GPIO_Init+0x354>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e4:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <HAL_GPIO_Init+0x354>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001108:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <HAL_GPIO_Init+0x354>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800110e:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <HAL_GPIO_Init+0x354>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001132:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <HAL_GPIO_Init+0x354>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_GPIO_Init+0x354>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <HAL_GPIO_Init+0x354>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3301      	adds	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	f67f ae86 	bls.w	8000e7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40013800 	.word	0x40013800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020400 	.word	0x40020400
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40021000 	.word	0x40021000
 800119c:	40021400 	.word	0x40021400
 80011a0:	40021800 	.word	0x40021800
 80011a4:	40021c00 	.word	0x40021c00
 80011a8:	40022000 	.word	0x40022000
 80011ac:	40022400 	.word	0x40022400
 80011b0:	40013c00 	.word	0x40013c00

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011d0:	e003      	b.n	80011da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	041a      	lsls	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e29b      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8087 	beq.w	800131a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800120c:	4b96      	ldr	r3, [pc, #600]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b04      	cmp	r3, #4
 8001216:	d00c      	beq.n	8001232 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001218:	4b93      	ldr	r3, [pc, #588]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b08      	cmp	r3, #8
 8001222:	d112      	bne.n	800124a <HAL_RCC_OscConfig+0x62>
 8001224:	4b90      	ldr	r3, [pc, #576]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001230:	d10b      	bne.n	800124a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001232:	4b8d      	ldr	r3, [pc, #564]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d06c      	beq.n	8001318 <HAL_RCC_OscConfig+0x130>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d168      	bne.n	8001318 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e275      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001252:	d106      	bne.n	8001262 <HAL_RCC_OscConfig+0x7a>
 8001254:	4b84      	ldr	r3, [pc, #528]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a83      	ldr	r2, [pc, #524]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800125a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e02e      	b.n	80012c0 <HAL_RCC_OscConfig+0xd8>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x9c>
 800126a:	4b7f      	ldr	r3, [pc, #508]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7e      	ldr	r2, [pc, #504]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b7c      	ldr	r3, [pc, #496]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a7b      	ldr	r2, [pc, #492]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800127c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e01d      	b.n	80012c0 <HAL_RCC_OscConfig+0xd8>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0xc0>
 800128e:	4b76      	ldr	r3, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a75      	ldr	r2, [pc, #468]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b73      	ldr	r3, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a72      	ldr	r2, [pc, #456]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0xd8>
 80012a8:	4b6f      	ldr	r3, [pc, #444]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a6e      	ldr	r2, [pc, #440]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b6c      	ldr	r3, [pc, #432]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a6b      	ldr	r2, [pc, #428]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fcb2 	bl	8000c30 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fcae 	bl	8000c30 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e229      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	4b61      	ldr	r3, [pc, #388]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0xe8>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc9e 	bl	8000c30 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fc9a 	bl	8000c30 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e215      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	4b57      	ldr	r3, [pc, #348]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x110>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d069      	beq.n	80013fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001326:	4b50      	ldr	r3, [pc, #320]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001332:	4b4d      	ldr	r3, [pc, #308]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b08      	cmp	r3, #8
 800133c:	d11c      	bne.n	8001378 <HAL_RCC_OscConfig+0x190>
 800133e:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d116      	bne.n	8001378 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_RCC_OscConfig+0x17a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e1e9      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	493d      	ldr	r1, [pc, #244]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	e040      	b.n	80013fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d023      	beq.n	80013c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001380:	4b39      	ldr	r3, [pc, #228]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a38      	ldr	r2, [pc, #224]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fc50 	bl	8000c30 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fc4c 	bl	8000c30 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e1c7      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a6:	4b30      	ldr	r3, [pc, #192]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4929      	ldr	r1, [pc, #164]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
 80013c6:	e018      	b.n	80013fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a26      	ldr	r2, [pc, #152]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc2c 	bl	8000c30 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff fc28 	bl	8000c30 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1a3      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d038      	beq.n	8001478 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d019      	beq.n	8001442 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141a:	f7ff fc09 	bl	8000c30 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff fc05 	bl	8000c30 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e180      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x23a>
 8001440:	e01a      	b.n	8001478 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_RCC_OscConfig+0x280>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144e:	f7ff fbef 	bl	8000c30 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001456:	f7ff fbeb 	bl	8000c30 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d903      	bls.n	800146c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e166      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
 8001468:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	4b92      	ldr	r3, [pc, #584]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 800146e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1ee      	bne.n	8001456 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80a4 	beq.w	80015ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001486:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b89      	ldr	r3, [pc, #548]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a88      	ldr	r2, [pc, #544]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b86      	ldr	r3, [pc, #536]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014aa:	2301      	movs	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ae:	4b83      	ldr	r3, [pc, #524]	; (80016bc <HAL_RCC_OscConfig+0x4d4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d118      	bne.n	80014ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014ba:	4b80      	ldr	r3, [pc, #512]	; (80016bc <HAL_RCC_OscConfig+0x4d4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a7f      	ldr	r2, [pc, #508]	; (80016bc <HAL_RCC_OscConfig+0x4d4>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fbb3 	bl	8000c30 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ce:	f7ff fbaf 	bl	8000c30 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b64      	cmp	r3, #100	; 0x64
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e12a      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e0:	4b76      	ldr	r3, [pc, #472]	; (80016bc <HAL_RCC_OscConfig+0x4d4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x31a>
 80014f4:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	4a6f      	ldr	r2, [pc, #444]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001500:	e02d      	b.n	800155e <HAL_RCC_OscConfig+0x376>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x33c>
 800150a:	4b6b      	ldr	r3, [pc, #428]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	4a6a      	ldr	r2, [pc, #424]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6713      	str	r3, [r2, #112]	; 0x70
 8001516:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	4a67      	ldr	r2, [pc, #412]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	6713      	str	r3, [r2, #112]	; 0x70
 8001522:	e01c      	b.n	800155e <HAL_RCC_OscConfig+0x376>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d10c      	bne.n	8001546 <HAL_RCC_OscConfig+0x35e>
 800152c:	4b62      	ldr	r3, [pc, #392]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	4a61      	ldr	r2, [pc, #388]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6713      	str	r3, [r2, #112]	; 0x70
 8001538:	4b5f      	ldr	r3, [pc, #380]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	4a5e      	ldr	r2, [pc, #376]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6713      	str	r3, [r2, #112]	; 0x70
 8001544:	e00b      	b.n	800155e <HAL_RCC_OscConfig+0x376>
 8001546:	4b5c      	ldr	r3, [pc, #368]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a5b      	ldr	r2, [pc, #364]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	6713      	str	r3, [r2, #112]	; 0x70
 8001552:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001558:	f023 0304 	bic.w	r3, r3, #4
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d015      	beq.n	8001592 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001566:	f7ff fb63 	bl	8000c30 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff fb5f 	bl	8000c30 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e0d8      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0ee      	beq.n	800156e <HAL_RCC_OscConfig+0x386>
 8001590:	e014      	b.n	80015bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001592:	f7ff fb4d 	bl	8000c30 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff fb49 	bl	8000c30 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e0c2      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1ee      	bne.n	800159a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d105      	bne.n	80015ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a3c      	ldr	r2, [pc, #240]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 80015c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80ae 	beq.w	8001734 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d06d      	beq.n	80016c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d14b      	bne.n	8001684 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a31      	ldr	r2, [pc, #196]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 80015f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb1a 	bl	8000c30 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff fb16 	bl	8000c30 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e091      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	019b      	lsls	r3, r3, #6
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	3b01      	subs	r3, #1
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	061b      	lsls	r3, r3, #24
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	071b      	lsls	r3, r3, #28
 800164a:	491b      	ldr	r1, [pc, #108]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a18      	ldr	r2, [pc, #96]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fae8 	bl	8000c30 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fae4 	bl	8000c30 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e05f      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x47c>
 8001682:	e057      	b.n	8001734 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 800168a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800168e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff face 	bl	8000c30 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff faca 	bl	8000c30 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e045      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <HAL_RCC_OscConfig+0x4d0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x4b0>
 80016b6:	e03d      	b.n	8001734 <HAL_RCC_OscConfig+0x54c>
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <HAL_RCC_OscConfig+0x558>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d030      	beq.n	8001730 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d129      	bne.n	8001730 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d122      	bne.n	8001730 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d119      	bne.n	8001730 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	3b01      	subs	r3, #1
 800170a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d10f      	bne.n	8001730 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0d0      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800175c:	4b6a      	ldr	r3, [pc, #424]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d910      	bls.n	800178c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b67      	ldr	r3, [pc, #412]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 020f 	bic.w	r2, r3, #15
 8001772:	4965      	ldr	r1, [pc, #404]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b63      	ldr	r3, [pc, #396]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b8      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a58      	ldr	r2, [pc, #352]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80017aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80017c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	494d      	ldr	r1, [pc, #308]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d040      	beq.n	8001868 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d115      	bne.n	8001826 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e07f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001806:	4b41      	ldr	r3, [pc, #260]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e073      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06b      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f023 0203 	bic.w	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4936      	ldr	r1, [pc, #216]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 8001834:	4313      	orrs	r3, r2
 8001836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001838:	f7ff f9fa 	bl	8000c30 <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	e00a      	b.n	8001856 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001840:	f7ff f9f6 	bl	8000c30 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	; 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e053      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 020c 	and.w	r2, r3, #12
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	429a      	cmp	r2, r3
 8001866:	d1eb      	bne.n	8001840 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d210      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 020f 	bic.w	r2, r3, #15
 800187e:	4922      	ldr	r1, [pc, #136]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e032      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4916      	ldr	r1, [pc, #88]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	490e      	ldr	r1, [pc, #56]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018d6:	f000 f821 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018da:	4602      	mov	r2, r0
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	490a      	ldr	r1, [pc, #40]	; (8001910 <HAL_RCC_ClockConfig+0x1cc>)
 80018e8:	5ccb      	ldrb	r3, [r1, r3]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1d0>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1d4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f956 	bl	8000ba8 <HAL_InitTick>

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00
 800190c:	40023800 	.word	0x40023800
 8001910:	0800308c 	.word	0x0800308c
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001920:	b090      	sub	sp, #64	; 0x40
 8001922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
 8001928:	2300      	movs	r3, #0
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800192c:	2300      	movs	r3, #0
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001934:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d00d      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x40>
 8001940:	2b08      	cmp	r3, #8
 8001942:	f200 80a1 	bhi.w	8001a88 <HAL_RCC_GetSysClockFreq+0x16c>
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x34>
 800194a:	2b04      	cmp	r3, #4
 800194c:	d003      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x3a>
 800194e:	e09b      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001954:	e09b      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001956:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001958:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800195a:	e098      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800195c:	4b4f      	ldr	r3, [pc, #316]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x180>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001966:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d028      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	2200      	movs	r2, #0
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	627a      	str	r2, [r7, #36]	; 0x24
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001984:	2100      	movs	r1, #0
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001988:	fb03 f201 	mul.w	r2, r3, r1
 800198c:	2300      	movs	r3, #0
 800198e:	fb00 f303 	mul.w	r3, r0, r3
 8001992:	4413      	add	r3, r2
 8001994:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001996:	fba0 1202 	umull	r1, r2, r0, r2
 800199a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800199c:	460a      	mov	r2, r1
 800199e:	62ba      	str	r2, [r7, #40]	; 0x28
 80019a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a2:	4413      	add	r3, r2
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a8:	2200      	movs	r2, #0
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	61fa      	str	r2, [r7, #28]
 80019ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019b6:	f7fe fc47 	bl	8000248 <__aeabi_uldivmod>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4613      	mov	r3, r2
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019c2:	e053      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c4:	4b35      	ldr	r3, [pc, #212]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x180>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	099b      	lsrs	r3, r3, #6
 80019ca:	2200      	movs	r2, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	617a      	str	r2, [r7, #20]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019d6:	f04f 0b00 	mov.w	fp, #0
 80019da:	4652      	mov	r2, sl
 80019dc:	465b      	mov	r3, fp
 80019de:	f04f 0000 	mov.w	r0, #0
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	0159      	lsls	r1, r3, #5
 80019e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ec:	0150      	lsls	r0, r2, #5
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	ebb2 080a 	subs.w	r8, r2, sl
 80019f6:	eb63 090b 	sbc.w	r9, r3, fp
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a0e:	ebb2 0408 	subs.w	r4, r2, r8
 8001a12:	eb63 0509 	sbc.w	r5, r3, r9
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	00eb      	lsls	r3, r5, #3
 8001a20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a24:	00e2      	lsls	r2, r4, #3
 8001a26:	4614      	mov	r4, r2
 8001a28:	461d      	mov	r5, r3
 8001a2a:	eb14 030a 	adds.w	r3, r4, sl
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	eb45 030b 	adc.w	r3, r5, fp
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a42:	4629      	mov	r1, r5
 8001a44:	028b      	lsls	r3, r1, #10
 8001a46:	4621      	mov	r1, r4
 8001a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	028a      	lsls	r2, r1, #10
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a56:	2200      	movs	r2, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	60fa      	str	r2, [r7, #12]
 8001a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a60:	f7fe fbf2 	bl	8000248 <__aeabi_uldivmod>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	0c1b      	lsrs	r3, r3, #16
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	3301      	adds	r3, #1
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001a7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a86:	e002      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3740      	adds	r7, #64	; 0x40
 8001a94:	46bd      	mov	sp, r7
 8001a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	00f42400 	.word	0x00f42400
 8001aa4:	017d7840 	.word	0x017d7840

08001aa8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_RCC_GetHCLKFreq+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000000 	.word	0x20000000

08001ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ac4:	f7ff fff0 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	0a9b      	lsrs	r3, r3, #10
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	; (8001ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	0800309c 	.word	0x0800309c

08001ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aec:	f7ff ffdc 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	0b5b      	lsrs	r3, r3, #13
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	4903      	ldr	r1, [pc, #12]	; (8001b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	0800309c 	.word	0x0800309c

08001b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d012      	beq.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b38:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a68      	ldr	r2, [pc, #416]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b42:	6093      	str	r3, [r2, #8]
 8001b44:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4c:	4964      	ldr	r1, [pc, #400]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d017      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b78:	4959      	ldr	r1, [pc, #356]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b88:	d101      	bne.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d017      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	494a      	ldr	r1, [pc, #296]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bc4:	d101      	bne.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 808b 	beq.w	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	4a39      	ldr	r2, [pc, #228]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001c00:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c0c:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a34      	ldr	r2, [pc, #208]	; (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c18:	f7ff f80a 	bl	8000c30 <HAL_GetTick>
 8001c1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c20:	f7ff f806 	bl	8000c30 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e38f      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c32:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c3e:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d035      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d02e      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c5c:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c66:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	4a1a      	ldr	r2, [pc, #104]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001c7e:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d114      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7fe ffce 	bl	8000c30 <HAL_GetTick>
 8001c94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c96:	e00a      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c98:	f7fe ffca 	bl	8000c30 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e351      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0ee      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cc6:	d111      	bne.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	4901      	ldr	r1, [pc, #4]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40007000 	.word	0x40007000
 8001ce8:	0ffffcff 	.word	0x0ffffcff
 8001cec:	4bac      	ldr	r3, [pc, #688]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	4aab      	ldr	r2, [pc, #684]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cf2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001cf6:	6093      	str	r3, [r2, #8]
 8001cf8:	4ba9      	ldr	r3, [pc, #676]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d04:	49a6      	ldr	r1, [pc, #664]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d16:	4ba2      	ldr	r3, [pc, #648]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d1c:	4aa0      	ldr	r2, [pc, #640]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d26:	4b9e      	ldr	r3, [pc, #632]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d30:	499b      	ldr	r1, [pc, #620]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00a      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d44:	4b96      	ldr	r3, [pc, #600]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d52:	4993      	ldr	r1, [pc, #588]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d66:	4b8e      	ldr	r3, [pc, #568]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d74:	498a      	ldr	r1, [pc, #552]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00a      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d88:	4b85      	ldr	r3, [pc, #532]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d96:	4982      	ldr	r1, [pc, #520]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001daa:	4b7d      	ldr	r3, [pc, #500]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db8:	4979      	ldr	r1, [pc, #484]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00a      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dcc:	4b74      	ldr	r3, [pc, #464]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	f023 0203 	bic.w	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4971      	ldr	r1, [pc, #452]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dee:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df4:	f023 020c 	bic.w	r2, r3, #12
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfc:	4968      	ldr	r1, [pc, #416]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00a      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e10:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4960      	ldr	r1, [pc, #384]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e32:	4b5b      	ldr	r3, [pc, #364]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e40:	4957      	ldr	r1, [pc, #348]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e54:	4b52      	ldr	r3, [pc, #328]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	494f      	ldr	r1, [pc, #316]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00a      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e76:	4b4a      	ldr	r3, [pc, #296]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	4946      	ldr	r1, [pc, #280]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e98:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	493e      	ldr	r1, [pc, #248]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001eba:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec8:	4935      	ldr	r1, [pc, #212]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001eea:	492d      	ldr	r1, [pc, #180]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d011      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001efe:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f0c:	4924      	ldr	r1, [pc, #144]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f44:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4c:	4914      	ldr	r1, [pc, #80]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00b      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f70:	490b      	ldr	r1, [pc, #44]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00f      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f94:	4902      	ldr	r1, [pc, #8]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f9c:	e002      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00b      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001fb0:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc0:	4986      	ldr	r1, [pc, #536]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00b      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001fd4:	4b81      	ldr	r3, [pc, #516]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe4:	497d      	ldr	r1, [pc, #500]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d006      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80d6 	beq.w	80021ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002000:	4b76      	ldr	r3, [pc, #472]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a75      	ldr	r2, [pc, #468]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002006:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800200a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800200c:	f7fe fe10 	bl	8000c30 <HAL_GetTick>
 8002010:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002014:	f7fe fe0c 	bl	8000c30 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e195      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002026:	4b6d      	ldr	r3, [pc, #436]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d021      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	2b00      	cmp	r3, #0
 8002044:	d11d      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002046:	4b65      	ldr	r3, [pc, #404]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800204c:	0c1b      	lsrs	r3, r3, #16
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002054:	4b61      	ldr	r3, [pc, #388]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800205a:	0e1b      	lsrs	r3, r3, #24
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	019a      	lsls	r2, r3, #6
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	431a      	orrs	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	061b      	lsls	r3, r3, #24
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	071b      	lsls	r3, r3, #28
 800207a:	4958      	ldr	r1, [pc, #352]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002096:	d00a      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d02e      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ac:	d129      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020ae:	4b4b      	ldr	r3, [pc, #300]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b4:	0c1b      	lsrs	r3, r3, #16
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020bc:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020c2:	0f1b      	lsrs	r3, r3, #28
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	019a      	lsls	r2, r3, #6
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	041b      	lsls	r3, r3, #16
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	061b      	lsls	r3, r3, #24
 80020dc:	431a      	orrs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	071b      	lsls	r3, r3, #28
 80020e2:	493e      	ldr	r1, [pc, #248]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020ea:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f0:	f023 021f 	bic.w	r2, r3, #31
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	3b01      	subs	r3, #1
 80020fa:	4938      	ldr	r1, [pc, #224]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01d      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800210e:	4b33      	ldr	r3, [pc, #204]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002114:	0e1b      	lsrs	r3, r3, #24
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800211c:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800211e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002122:	0f1b      	lsrs	r3, r3, #28
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	019a      	lsls	r2, r3, #6
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	041b      	lsls	r3, r3, #16
 8002136:	431a      	orrs	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	061b      	lsls	r3, r3, #24
 800213c:	431a      	orrs	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	071b      	lsls	r3, r3, #28
 8002142:	4926      	ldr	r1, [pc, #152]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d011      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	019a      	lsls	r2, r3, #6
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	041b      	lsls	r3, r3, #16
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	061b      	lsls	r3, r3, #24
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	071b      	lsls	r3, r3, #28
 8002172:	491a      	ldr	r1, [pc, #104]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a17      	ldr	r2, [pc, #92]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002180:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002186:	f7fe fd53 	bl	8000c30 <HAL_GetTick>
 800218a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800218e:	f7fe fd4f 	bl	8000c30 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b64      	cmp	r3, #100	; 0x64
 800219a:	d901      	bls.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0d8      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	f040 80ce 	bne.w	8002350 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a08      	ldr	r2, [pc, #32]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c0:	f7fe fd36 	bl	8000c30 <HAL_GetTick>
 80021c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021c6:	e00b      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021c8:	f7fe fd32 	bl	8000c30 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d904      	bls.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0bb      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021e0:	4b5e      	ldr	r3, [pc, #376]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021ec:	d0ec      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800220a:	2b00      	cmp	r3, #0
 800220c:	d02e      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d12a      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002216:	4b51      	ldr	r3, [pc, #324]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002224:	4b4d      	ldr	r3, [pc, #308]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	0f1b      	lsrs	r3, r3, #28
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	019a      	lsls	r2, r3, #6
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	041b      	lsls	r3, r3, #16
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	061b      	lsls	r3, r3, #24
 8002244:	431a      	orrs	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	071b      	lsls	r3, r3, #28
 800224a:	4944      	ldr	r1, [pc, #272]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002252:	4b42      	ldr	r3, [pc, #264]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002258:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	3b01      	subs	r3, #1
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	493d      	ldr	r1, [pc, #244]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d022      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800227c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002280:	d11d      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002282:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	0e1b      	lsrs	r3, r3, #24
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002290:	4b32      	ldr	r3, [pc, #200]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	0f1b      	lsrs	r3, r3, #28
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	019a      	lsls	r2, r3, #6
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	431a      	orrs	r2, r3
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	061b      	lsls	r3, r3, #24
 80022b0:	431a      	orrs	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	071b      	lsls	r3, r3, #28
 80022b6:	4929      	ldr	r1, [pc, #164]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d028      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d0:	0e1b      	lsrs	r3, r3, #24
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022d8:	4b20      	ldr	r3, [pc, #128]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	0c1b      	lsrs	r3, r3, #16
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	019a      	lsls	r2, r3, #6
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	041b      	lsls	r3, r3, #16
 80022f0:	431a      	orrs	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	071b      	lsls	r3, r3, #28
 80022fe:	4917      	ldr	r1, [pc, #92]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800230c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	4911      	ldr	r1, [pc, #68]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0e      	ldr	r2, [pc, #56]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002326:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002328:	f7fe fc82 	bl	8000c30 <HAL_GetTick>
 800232c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002330:	f7fe fc7e 	bl	8000c30 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e007      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800234a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800234e:	d1ef      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e040      	b.n	80023f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fb7a 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2224      	movs	r2, #36	; 0x24
 800238c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f974 	bl	800268c <UART_SetConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e022      	b.n	80023f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fbcc 	bl	8002b54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fc53 	bl	8002c98 <UART_CheckIdleState>
 80023f2:	4603      	mov	r3, r0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af02      	add	r7, sp, #8
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	4613      	mov	r3, r2
 800240a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002410:	2b20      	cmp	r3, #32
 8002412:	d171      	bne.n	80024f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <HAL_UART_Transmit+0x24>
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e06a      	b.n	80024fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2221      	movs	r2, #33	; 0x21
 8002430:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002432:	f7fe fbfd 	bl	8000c30 <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	88fa      	ldrh	r2, [r7, #6]
 8002444:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002450:	d108      	bne.n	8002464 <HAL_UART_Transmit+0x68>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d104      	bne.n	8002464 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	e003      	b.n	800246c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800246c:	e02c      	b.n	80024c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2200      	movs	r2, #0
 8002476:	2180      	movs	r1, #128	; 0x80
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fc5a 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e038      	b.n	80024fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10b      	bne.n	80024a6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	3302      	adds	r3, #2
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	e007      	b.n	80024b6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	3301      	adds	r3, #1
 80024b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1cc      	bne.n	800246e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2200      	movs	r2, #0
 80024dc:	2140      	movs	r1, #64	; 0x40
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fc27 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e005      	b.n	80024fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e000      	b.n	80024fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80024f8:	2302      	movs	r3, #2
  }
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b08a      	sub	sp, #40	; 0x28
 8002506:	af02      	add	r7, sp, #8
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002518:	2b20      	cmp	r3, #32
 800251a:	f040 80b1 	bne.w	8002680 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_UART_Receive+0x28>
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e0a9      	b.n	8002682 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2222      	movs	r2, #34	; 0x22
 800253a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002544:	f7fe fb74 	bl	8000c30 <HAL_GetTick>
 8002548:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	88fa      	ldrh	r2, [r7, #6]
 800254e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	88fa      	ldrh	r2, [r7, #6]
 8002556:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002562:	d10e      	bne.n	8002582 <HAL_UART_Receive+0x80>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_UART_Receive+0x76>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002572:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002576:	e02d      	b.n	80025d4 <HAL_UART_Receive+0xd2>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	22ff      	movs	r2, #255	; 0xff
 800257c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002580:	e028      	b.n	80025d4 <HAL_UART_Receive+0xd2>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10d      	bne.n	80025a6 <HAL_UART_Receive+0xa4>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d104      	bne.n	800259c <HAL_UART_Receive+0x9a>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	22ff      	movs	r2, #255	; 0xff
 8002596:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800259a:	e01b      	b.n	80025d4 <HAL_UART_Receive+0xd2>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	227f      	movs	r2, #127	; 0x7f
 80025a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025a4:	e016      	b.n	80025d4 <HAL_UART_Receive+0xd2>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ae:	d10d      	bne.n	80025cc <HAL_UART_Receive+0xca>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d104      	bne.n	80025c2 <HAL_UART_Receive+0xc0>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	227f      	movs	r2, #127	; 0x7f
 80025bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025c0:	e008      	b.n	80025d4 <HAL_UART_Receive+0xd2>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	223f      	movs	r2, #63	; 0x3f
 80025c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025ca:	e003      	b.n	80025d4 <HAL_UART_Receive+0xd2>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80025da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e4:	d108      	bne.n	80025f8 <HAL_UART_Receive+0xf6>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d104      	bne.n	80025f8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	e003      	b.n	8002600 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002600:	e032      	b.n	8002668 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2200      	movs	r2, #0
 800260a:	2120      	movs	r1, #32
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fb90 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e032      	b.n	8002682 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	b29a      	uxth	r2, r3
 800262a:	8a7b      	ldrh	r3, [r7, #18]
 800262c:	4013      	ands	r3, r2
 800262e:	b29a      	uxth	r2, r3
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	3302      	adds	r3, #2
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	e00c      	b.n	8002656 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	b2da      	uxtb	r2, r3
 8002644:	8a7b      	ldrh	r3, [r7, #18]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4013      	ands	r3, r2
 800264a:	b2da      	uxtb	r2, r3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	3301      	adds	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1c6      	bne.n	8002602 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e000      	b.n	8002682 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002680:	2302      	movs	r3, #2
  }
}
 8002682:	4618      	mov	r0, r3
 8002684:	3720      	adds	r7, #32
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4ba6      	ldr	r3, [pc, #664]	; (8002950 <UART_SetConfig+0x2c4>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	6979      	ldr	r1, [r7, #20]
 80026c0:	430b      	orrs	r3, r1
 80026c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a94      	ldr	r2, [pc, #592]	; (8002954 <UART_SetConfig+0x2c8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d120      	bne.n	800274a <UART_SetConfig+0xbe>
 8002708:	4b93      	ldr	r3, [pc, #588]	; (8002958 <UART_SetConfig+0x2cc>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b03      	cmp	r3, #3
 8002714:	d816      	bhi.n	8002744 <UART_SetConfig+0xb8>
 8002716:	a201      	add	r2, pc, #4	; (adr r2, 800271c <UART_SetConfig+0x90>)
 8002718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271c:	0800272d 	.word	0x0800272d
 8002720:	08002739 	.word	0x08002739
 8002724:	08002733 	.word	0x08002733
 8002728:	0800273f 	.word	0x0800273f
 800272c:	2301      	movs	r3, #1
 800272e:	77fb      	strb	r3, [r7, #31]
 8002730:	e150      	b.n	80029d4 <UART_SetConfig+0x348>
 8002732:	2302      	movs	r3, #2
 8002734:	77fb      	strb	r3, [r7, #31]
 8002736:	e14d      	b.n	80029d4 <UART_SetConfig+0x348>
 8002738:	2304      	movs	r3, #4
 800273a:	77fb      	strb	r3, [r7, #31]
 800273c:	e14a      	b.n	80029d4 <UART_SetConfig+0x348>
 800273e:	2308      	movs	r3, #8
 8002740:	77fb      	strb	r3, [r7, #31]
 8002742:	e147      	b.n	80029d4 <UART_SetConfig+0x348>
 8002744:	2310      	movs	r3, #16
 8002746:	77fb      	strb	r3, [r7, #31]
 8002748:	e144      	b.n	80029d4 <UART_SetConfig+0x348>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a83      	ldr	r2, [pc, #524]	; (800295c <UART_SetConfig+0x2d0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d132      	bne.n	80027ba <UART_SetConfig+0x12e>
 8002754:	4b80      	ldr	r3, [pc, #512]	; (8002958 <UART_SetConfig+0x2cc>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d828      	bhi.n	80027b4 <UART_SetConfig+0x128>
 8002762:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <UART_SetConfig+0xdc>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	0800279d 	.word	0x0800279d
 800276c:	080027b5 	.word	0x080027b5
 8002770:	080027b5 	.word	0x080027b5
 8002774:	080027b5 	.word	0x080027b5
 8002778:	080027a9 	.word	0x080027a9
 800277c:	080027b5 	.word	0x080027b5
 8002780:	080027b5 	.word	0x080027b5
 8002784:	080027b5 	.word	0x080027b5
 8002788:	080027a3 	.word	0x080027a3
 800278c:	080027b5 	.word	0x080027b5
 8002790:	080027b5 	.word	0x080027b5
 8002794:	080027b5 	.word	0x080027b5
 8002798:	080027af 	.word	0x080027af
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]
 80027a0:	e118      	b.n	80029d4 <UART_SetConfig+0x348>
 80027a2:	2302      	movs	r3, #2
 80027a4:	77fb      	strb	r3, [r7, #31]
 80027a6:	e115      	b.n	80029d4 <UART_SetConfig+0x348>
 80027a8:	2304      	movs	r3, #4
 80027aa:	77fb      	strb	r3, [r7, #31]
 80027ac:	e112      	b.n	80029d4 <UART_SetConfig+0x348>
 80027ae:	2308      	movs	r3, #8
 80027b0:	77fb      	strb	r3, [r7, #31]
 80027b2:	e10f      	b.n	80029d4 <UART_SetConfig+0x348>
 80027b4:	2310      	movs	r3, #16
 80027b6:	77fb      	strb	r3, [r7, #31]
 80027b8:	e10c      	b.n	80029d4 <UART_SetConfig+0x348>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a68      	ldr	r2, [pc, #416]	; (8002960 <UART_SetConfig+0x2d4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d120      	bne.n	8002806 <UART_SetConfig+0x17a>
 80027c4:	4b64      	ldr	r3, [pc, #400]	; (8002958 <UART_SetConfig+0x2cc>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027ce:	2b30      	cmp	r3, #48	; 0x30
 80027d0:	d013      	beq.n	80027fa <UART_SetConfig+0x16e>
 80027d2:	2b30      	cmp	r3, #48	; 0x30
 80027d4:	d814      	bhi.n	8002800 <UART_SetConfig+0x174>
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d009      	beq.n	80027ee <UART_SetConfig+0x162>
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d810      	bhi.n	8002800 <UART_SetConfig+0x174>
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <UART_SetConfig+0x15c>
 80027e2:	2b10      	cmp	r3, #16
 80027e4:	d006      	beq.n	80027f4 <UART_SetConfig+0x168>
 80027e6:	e00b      	b.n	8002800 <UART_SetConfig+0x174>
 80027e8:	2300      	movs	r3, #0
 80027ea:	77fb      	strb	r3, [r7, #31]
 80027ec:	e0f2      	b.n	80029d4 <UART_SetConfig+0x348>
 80027ee:	2302      	movs	r3, #2
 80027f0:	77fb      	strb	r3, [r7, #31]
 80027f2:	e0ef      	b.n	80029d4 <UART_SetConfig+0x348>
 80027f4:	2304      	movs	r3, #4
 80027f6:	77fb      	strb	r3, [r7, #31]
 80027f8:	e0ec      	b.n	80029d4 <UART_SetConfig+0x348>
 80027fa:	2308      	movs	r3, #8
 80027fc:	77fb      	strb	r3, [r7, #31]
 80027fe:	e0e9      	b.n	80029d4 <UART_SetConfig+0x348>
 8002800:	2310      	movs	r3, #16
 8002802:	77fb      	strb	r3, [r7, #31]
 8002804:	e0e6      	b.n	80029d4 <UART_SetConfig+0x348>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a56      	ldr	r2, [pc, #344]	; (8002964 <UART_SetConfig+0x2d8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d120      	bne.n	8002852 <UART_SetConfig+0x1c6>
 8002810:	4b51      	ldr	r3, [pc, #324]	; (8002958 <UART_SetConfig+0x2cc>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002816:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800281a:	2bc0      	cmp	r3, #192	; 0xc0
 800281c:	d013      	beq.n	8002846 <UART_SetConfig+0x1ba>
 800281e:	2bc0      	cmp	r3, #192	; 0xc0
 8002820:	d814      	bhi.n	800284c <UART_SetConfig+0x1c0>
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d009      	beq.n	800283a <UART_SetConfig+0x1ae>
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d810      	bhi.n	800284c <UART_SetConfig+0x1c0>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <UART_SetConfig+0x1a8>
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d006      	beq.n	8002840 <UART_SetConfig+0x1b4>
 8002832:	e00b      	b.n	800284c <UART_SetConfig+0x1c0>
 8002834:	2300      	movs	r3, #0
 8002836:	77fb      	strb	r3, [r7, #31]
 8002838:	e0cc      	b.n	80029d4 <UART_SetConfig+0x348>
 800283a:	2302      	movs	r3, #2
 800283c:	77fb      	strb	r3, [r7, #31]
 800283e:	e0c9      	b.n	80029d4 <UART_SetConfig+0x348>
 8002840:	2304      	movs	r3, #4
 8002842:	77fb      	strb	r3, [r7, #31]
 8002844:	e0c6      	b.n	80029d4 <UART_SetConfig+0x348>
 8002846:	2308      	movs	r3, #8
 8002848:	77fb      	strb	r3, [r7, #31]
 800284a:	e0c3      	b.n	80029d4 <UART_SetConfig+0x348>
 800284c:	2310      	movs	r3, #16
 800284e:	77fb      	strb	r3, [r7, #31]
 8002850:	e0c0      	b.n	80029d4 <UART_SetConfig+0x348>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a44      	ldr	r2, [pc, #272]	; (8002968 <UART_SetConfig+0x2dc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d125      	bne.n	80028a8 <UART_SetConfig+0x21c>
 800285c:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <UART_SetConfig+0x2cc>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800286a:	d017      	beq.n	800289c <UART_SetConfig+0x210>
 800286c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002870:	d817      	bhi.n	80028a2 <UART_SetConfig+0x216>
 8002872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002876:	d00b      	beq.n	8002890 <UART_SetConfig+0x204>
 8002878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800287c:	d811      	bhi.n	80028a2 <UART_SetConfig+0x216>
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <UART_SetConfig+0x1fe>
 8002882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002886:	d006      	beq.n	8002896 <UART_SetConfig+0x20a>
 8002888:	e00b      	b.n	80028a2 <UART_SetConfig+0x216>
 800288a:	2300      	movs	r3, #0
 800288c:	77fb      	strb	r3, [r7, #31]
 800288e:	e0a1      	b.n	80029d4 <UART_SetConfig+0x348>
 8002890:	2302      	movs	r3, #2
 8002892:	77fb      	strb	r3, [r7, #31]
 8002894:	e09e      	b.n	80029d4 <UART_SetConfig+0x348>
 8002896:	2304      	movs	r3, #4
 8002898:	77fb      	strb	r3, [r7, #31]
 800289a:	e09b      	b.n	80029d4 <UART_SetConfig+0x348>
 800289c:	2308      	movs	r3, #8
 800289e:	77fb      	strb	r3, [r7, #31]
 80028a0:	e098      	b.n	80029d4 <UART_SetConfig+0x348>
 80028a2:	2310      	movs	r3, #16
 80028a4:	77fb      	strb	r3, [r7, #31]
 80028a6:	e095      	b.n	80029d4 <UART_SetConfig+0x348>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2f      	ldr	r2, [pc, #188]	; (800296c <UART_SetConfig+0x2e0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d125      	bne.n	80028fe <UART_SetConfig+0x272>
 80028b2:	4b29      	ldr	r3, [pc, #164]	; (8002958 <UART_SetConfig+0x2cc>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028c0:	d017      	beq.n	80028f2 <UART_SetConfig+0x266>
 80028c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028c6:	d817      	bhi.n	80028f8 <UART_SetConfig+0x26c>
 80028c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028cc:	d00b      	beq.n	80028e6 <UART_SetConfig+0x25a>
 80028ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d2:	d811      	bhi.n	80028f8 <UART_SetConfig+0x26c>
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <UART_SetConfig+0x254>
 80028d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028dc:	d006      	beq.n	80028ec <UART_SetConfig+0x260>
 80028de:	e00b      	b.n	80028f8 <UART_SetConfig+0x26c>
 80028e0:	2301      	movs	r3, #1
 80028e2:	77fb      	strb	r3, [r7, #31]
 80028e4:	e076      	b.n	80029d4 <UART_SetConfig+0x348>
 80028e6:	2302      	movs	r3, #2
 80028e8:	77fb      	strb	r3, [r7, #31]
 80028ea:	e073      	b.n	80029d4 <UART_SetConfig+0x348>
 80028ec:	2304      	movs	r3, #4
 80028ee:	77fb      	strb	r3, [r7, #31]
 80028f0:	e070      	b.n	80029d4 <UART_SetConfig+0x348>
 80028f2:	2308      	movs	r3, #8
 80028f4:	77fb      	strb	r3, [r7, #31]
 80028f6:	e06d      	b.n	80029d4 <UART_SetConfig+0x348>
 80028f8:	2310      	movs	r3, #16
 80028fa:	77fb      	strb	r3, [r7, #31]
 80028fc:	e06a      	b.n	80029d4 <UART_SetConfig+0x348>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <UART_SetConfig+0x2e4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d138      	bne.n	800297a <UART_SetConfig+0x2ee>
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <UART_SetConfig+0x2cc>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002912:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002916:	d017      	beq.n	8002948 <UART_SetConfig+0x2bc>
 8002918:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800291c:	d82a      	bhi.n	8002974 <UART_SetConfig+0x2e8>
 800291e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002922:	d00b      	beq.n	800293c <UART_SetConfig+0x2b0>
 8002924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002928:	d824      	bhi.n	8002974 <UART_SetConfig+0x2e8>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <UART_SetConfig+0x2aa>
 800292e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002932:	d006      	beq.n	8002942 <UART_SetConfig+0x2b6>
 8002934:	e01e      	b.n	8002974 <UART_SetConfig+0x2e8>
 8002936:	2300      	movs	r3, #0
 8002938:	77fb      	strb	r3, [r7, #31]
 800293a:	e04b      	b.n	80029d4 <UART_SetConfig+0x348>
 800293c:	2302      	movs	r3, #2
 800293e:	77fb      	strb	r3, [r7, #31]
 8002940:	e048      	b.n	80029d4 <UART_SetConfig+0x348>
 8002942:	2304      	movs	r3, #4
 8002944:	77fb      	strb	r3, [r7, #31]
 8002946:	e045      	b.n	80029d4 <UART_SetConfig+0x348>
 8002948:	2308      	movs	r3, #8
 800294a:	77fb      	strb	r3, [r7, #31]
 800294c:	e042      	b.n	80029d4 <UART_SetConfig+0x348>
 800294e:	bf00      	nop
 8002950:	efff69f3 	.word	0xefff69f3
 8002954:	40011000 	.word	0x40011000
 8002958:	40023800 	.word	0x40023800
 800295c:	40004400 	.word	0x40004400
 8002960:	40004800 	.word	0x40004800
 8002964:	40004c00 	.word	0x40004c00
 8002968:	40005000 	.word	0x40005000
 800296c:	40011400 	.word	0x40011400
 8002970:	40007800 	.word	0x40007800
 8002974:	2310      	movs	r3, #16
 8002976:	77fb      	strb	r3, [r7, #31]
 8002978:	e02c      	b.n	80029d4 <UART_SetConfig+0x348>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a72      	ldr	r2, [pc, #456]	; (8002b48 <UART_SetConfig+0x4bc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d125      	bne.n	80029d0 <UART_SetConfig+0x344>
 8002984:	4b71      	ldr	r3, [pc, #452]	; (8002b4c <UART_SetConfig+0x4c0>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800298e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002992:	d017      	beq.n	80029c4 <UART_SetConfig+0x338>
 8002994:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002998:	d817      	bhi.n	80029ca <UART_SetConfig+0x33e>
 800299a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299e:	d00b      	beq.n	80029b8 <UART_SetConfig+0x32c>
 80029a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a4:	d811      	bhi.n	80029ca <UART_SetConfig+0x33e>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <UART_SetConfig+0x326>
 80029aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ae:	d006      	beq.n	80029be <UART_SetConfig+0x332>
 80029b0:	e00b      	b.n	80029ca <UART_SetConfig+0x33e>
 80029b2:	2300      	movs	r3, #0
 80029b4:	77fb      	strb	r3, [r7, #31]
 80029b6:	e00d      	b.n	80029d4 <UART_SetConfig+0x348>
 80029b8:	2302      	movs	r3, #2
 80029ba:	77fb      	strb	r3, [r7, #31]
 80029bc:	e00a      	b.n	80029d4 <UART_SetConfig+0x348>
 80029be:	2304      	movs	r3, #4
 80029c0:	77fb      	strb	r3, [r7, #31]
 80029c2:	e007      	b.n	80029d4 <UART_SetConfig+0x348>
 80029c4:	2308      	movs	r3, #8
 80029c6:	77fb      	strb	r3, [r7, #31]
 80029c8:	e004      	b.n	80029d4 <UART_SetConfig+0x348>
 80029ca:	2310      	movs	r3, #16
 80029cc:	77fb      	strb	r3, [r7, #31]
 80029ce:	e001      	b.n	80029d4 <UART_SetConfig+0x348>
 80029d0:	2310      	movs	r3, #16
 80029d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029dc:	d15b      	bne.n	8002a96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80029de:	7ffb      	ldrb	r3, [r7, #31]
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d828      	bhi.n	8002a36 <UART_SetConfig+0x3aa>
 80029e4:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <UART_SetConfig+0x360>)
 80029e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ea:	bf00      	nop
 80029ec:	08002a11 	.word	0x08002a11
 80029f0:	08002a19 	.word	0x08002a19
 80029f4:	08002a21 	.word	0x08002a21
 80029f8:	08002a37 	.word	0x08002a37
 80029fc:	08002a27 	.word	0x08002a27
 8002a00:	08002a37 	.word	0x08002a37
 8002a04:	08002a37 	.word	0x08002a37
 8002a08:	08002a37 	.word	0x08002a37
 8002a0c:	08002a2f 	.word	0x08002a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a10:	f7ff f856 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 8002a14:	61b8      	str	r0, [r7, #24]
        break;
 8002a16:	e013      	b.n	8002a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a18:	f7ff f866 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 8002a1c:	61b8      	str	r0, [r7, #24]
        break;
 8002a1e:	e00f      	b.n	8002a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a20:	4b4b      	ldr	r3, [pc, #300]	; (8002b50 <UART_SetConfig+0x4c4>)
 8002a22:	61bb      	str	r3, [r7, #24]
        break;
 8002a24:	e00c      	b.n	8002a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a26:	f7fe ff79 	bl	800191c <HAL_RCC_GetSysClockFreq>
 8002a2a:	61b8      	str	r0, [r7, #24]
        break;
 8002a2c:	e008      	b.n	8002a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a32:	61bb      	str	r3, [r7, #24]
        break;
 8002a34:	e004      	b.n	8002a40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d074      	beq.n	8002b30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	005a      	lsls	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	441a      	add	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	d916      	bls.n	8002a90 <UART_SetConfig+0x404>
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d212      	bcs.n	8002a90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f023 030f 	bic.w	r3, r3, #15
 8002a72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	89fb      	ldrh	r3, [r7, #14]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	89fa      	ldrh	r2, [r7, #14]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	e04f      	b.n	8002b30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	77bb      	strb	r3, [r7, #30]
 8002a94:	e04c      	b.n	8002b30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a96:	7ffb      	ldrb	r3, [r7, #31]
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d828      	bhi.n	8002aee <UART_SetConfig+0x462>
 8002a9c:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <UART_SetConfig+0x418>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002ac9 	.word	0x08002ac9
 8002aa8:	08002ad1 	.word	0x08002ad1
 8002aac:	08002ad9 	.word	0x08002ad9
 8002ab0:	08002aef 	.word	0x08002aef
 8002ab4:	08002adf 	.word	0x08002adf
 8002ab8:	08002aef 	.word	0x08002aef
 8002abc:	08002aef 	.word	0x08002aef
 8002ac0:	08002aef 	.word	0x08002aef
 8002ac4:	08002ae7 	.word	0x08002ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ac8:	f7fe fffa 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 8002acc:	61b8      	str	r0, [r7, #24]
        break;
 8002ace:	e013      	b.n	8002af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ad0:	f7ff f80a 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 8002ad4:	61b8      	str	r0, [r7, #24]
        break;
 8002ad6:	e00f      	b.n	8002af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <UART_SetConfig+0x4c4>)
 8002ada:	61bb      	str	r3, [r7, #24]
        break;
 8002adc:	e00c      	b.n	8002af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ade:	f7fe ff1d 	bl	800191c <HAL_RCC_GetSysClockFreq>
 8002ae2:	61b8      	str	r0, [r7, #24]
        break;
 8002ae4:	e008      	b.n	8002af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aea:	61bb      	str	r3, [r7, #24]
        break;
 8002aec:	e004      	b.n	8002af8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	77bb      	strb	r3, [r7, #30]
        break;
 8002af6:	bf00      	nop
    }

    if (pclk != 0U)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d018      	beq.n	8002b30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	085a      	lsrs	r2, r3, #1
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	441a      	add	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b0f      	cmp	r3, #15
 8002b16:	d909      	bls.n	8002b2c <UART_SetConfig+0x4a0>
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1e:	d205      	bcs.n	8002b2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	e001      	b.n	8002b30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002b3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40007c00 	.word	0x40007c00
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	00f42400 	.word	0x00f42400

08002b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01a      	beq.n	8002c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c52:	d10a      	bne.n	8002c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	605a      	str	r2, [r3, #4]
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ca8:	f7fd ffc2 	bl	8000c30 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d10e      	bne.n	8002cda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f831 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e027      	b.n	8002d2a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d10e      	bne.n	8002d06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f81b 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e011      	b.n	8002d2a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b09c      	sub	sp, #112	; 0x70
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d42:	e0a7      	b.n	8002e94 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d4a:	f000 80a3 	beq.w	8002e94 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7fd ff6f 	bl	8000c30 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x32>
 8002d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d13f      	bne.n	8002de4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d78:	667b      	str	r3, [r7, #100]	; 0x64
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e6      	bne.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da0:	e853 3f00 	ldrex	r3, [r3]
 8002da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	663b      	str	r3, [r7, #96]	; 0x60
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3308      	adds	r3, #8
 8002db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002db6:	64ba      	str	r2, [r7, #72]	; 0x48
 8002db8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dbe:	e841 2300 	strex	r3, r2, [r1]
 8002dc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e5      	bne.n	8002d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e068      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d050      	beq.n	8002e94 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e00:	d148      	bne.n	8002e94 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e0a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e2c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e6      	bne.n	8002e0c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3308      	adds	r3, #8
 8002e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e5e:	623a      	str	r2, [r7, #32]
 8002e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	69f9      	ldr	r1, [r7, #28]
 8002e64:	6a3a      	ldr	r2, [r7, #32]
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e5      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e010      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	f43f af48 	beq.w	8002d44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3770      	adds	r7, #112	; 0x70
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <memset>:
 8002ebe:	4402      	add	r2, r0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d100      	bne.n	8002ec8 <memset+0xa>
 8002ec6:	4770      	bx	lr
 8002ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8002ecc:	e7f9      	b.n	8002ec2 <memset+0x4>
	...

08002ed0 <__libc_init_array>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	4d0d      	ldr	r5, [pc, #52]	; (8002f08 <__libc_init_array+0x38>)
 8002ed4:	4c0d      	ldr	r4, [pc, #52]	; (8002f0c <__libc_init_array+0x3c>)
 8002ed6:	1b64      	subs	r4, r4, r5
 8002ed8:	10a4      	asrs	r4, r4, #2
 8002eda:	2600      	movs	r6, #0
 8002edc:	42a6      	cmp	r6, r4
 8002ede:	d109      	bne.n	8002ef4 <__libc_init_array+0x24>
 8002ee0:	4d0b      	ldr	r5, [pc, #44]	; (8002f10 <__libc_init_array+0x40>)
 8002ee2:	4c0c      	ldr	r4, [pc, #48]	; (8002f14 <__libc_init_array+0x44>)
 8002ee4:	f000 f826 	bl	8002f34 <_init>
 8002ee8:	1b64      	subs	r4, r4, r5
 8002eea:	10a4      	asrs	r4, r4, #2
 8002eec:	2600      	movs	r6, #0
 8002eee:	42a6      	cmp	r6, r4
 8002ef0:	d105      	bne.n	8002efe <__libc_init_array+0x2e>
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef8:	4798      	blx	r3
 8002efa:	3601      	adds	r6, #1
 8002efc:	e7ee      	b.n	8002edc <__libc_init_array+0xc>
 8002efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f02:	4798      	blx	r3
 8002f04:	3601      	adds	r6, #1
 8002f06:	e7f2      	b.n	8002eee <__libc_init_array+0x1e>
 8002f08:	080030ac 	.word	0x080030ac
 8002f0c:	080030ac 	.word	0x080030ac
 8002f10:	080030ac 	.word	0x080030ac
 8002f14:	080030b0 	.word	0x080030b0

08002f18 <memcpy>:
 8002f18:	440a      	add	r2, r1
 8002f1a:	4291      	cmp	r1, r2
 8002f1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002f20:	d100      	bne.n	8002f24 <memcpy+0xc>
 8002f22:	4770      	bx	lr
 8002f24:	b510      	push	{r4, lr}
 8002f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f2e:	4291      	cmp	r1, r2
 8002f30:	d1f9      	bne.n	8002f26 <memcpy+0xe>
 8002f32:	bd10      	pop	{r4, pc}

08002f34 <_init>:
 8002f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f36:	bf00      	nop
 8002f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3a:	bc08      	pop	{r3}
 8002f3c:	469e      	mov	lr, r3
 8002f3e:	4770      	bx	lr

08002f40 <_fini>:
 8002f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f42:	bf00      	nop
 8002f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f46:	bc08      	pop	{r3}
 8002f48:	469e      	mov	lr, r3
 8002f4a:	4770      	bx	lr
