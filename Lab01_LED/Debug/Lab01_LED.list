
Lab01_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001628  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001820  08001820  00011820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001830  08001830  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001830  08001830  00011830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001838  08001838  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001838  08001838  00011838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800183c  0800183c  0001183c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  0800184c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800184c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004775  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011b9  00000000  00000000  000247f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004a8  00000000  00000000  000259b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000356  00000000  00000000  00025e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025586  00000000  00000000  000261ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005c18  00000000  00000000  0004b734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e778d  00000000  00000000  0005134c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001074  00000000  00000000  00138adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00139b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08001808 	.word	0x08001808

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08001808 	.word	0x08001808

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <MX_GPIO_Init+0x58>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	4a0f      	ldr	r2, [pc, #60]	; (800058c <MX_GPIO_Init+0x58>)
 800054e:	f043 0302 	orr.w	r3, r3, #2
 8000552:	6313      	str	r3, [r2, #48]	; 0x30
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <MX_GPIO_Init+0x58>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	f003 0302 	and.w	r3, r3, #2
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2101      	movs	r1, #1
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <MX_GPIO_Init+0x5c>)
 8000566:	f000 fc59 	bl	8000e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800056a:	2301      	movs	r3, #1
 800056c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	4619      	mov	r1, r3
 800057e:	4804      	ldr	r0, [pc, #16]	; (8000590 <MX_GPIO_Init+0x5c>)
 8000580:	f000 faa0 	bl	8000ac4 <HAL_GPIO_Init>

}
 8000584:	bf00      	nop
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40023800 	.word	0x40023800
 8000590:	40020400 	.word	0x40020400

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 f92d 	bl	80007f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f82e 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f7ff ffc8 	bl	8000534 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2101      	movs	r1, #1
 80005a8:	4811      	ldr	r0, [pc, #68]	; (80005f0 <main+0x5c>)
 80005aa:	f000 fc37 	bl	8000e1c <HAL_GPIO_WritePin>
	  led0=1;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <main+0x60>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b8:	f000 f97a 	bl	80008b0 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <main+0x5c>)
 80005c2:	f000 fc2b 	bl	8000e1c <HAL_GPIO_WritePin>
	  led0=0;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <main+0x60>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 80005cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d0:	f000 f96e 	bl	80008b0 <HAL_Delay>

	  num++;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <main+0x64>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <main+0x64>)
 80005de:	701a      	strb	r2, [r3, #0]
	  if(num>7)
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <main+0x64>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b07      	cmp	r3, #7
 80005e6:	d9dd      	bls.n	80005a4 <main+0x10>
		  num=0;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <main+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80005ee:	e7d9      	b.n	80005a4 <main+0x10>
 80005f0:	40020400 	.word	0x40020400
 80005f4:	20000029 	.word	0x20000029
 80005f8:	20000028 	.word	0x20000028

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2234      	movs	r2, #52	; 0x34
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f001 f8d0 	bl	80017b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <SystemClock_Config+0xd4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a2a      	ldr	r2, [pc, #168]	; (80006d0 <SystemClock_Config+0xd4>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SystemClock_Config+0xd4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemClock_Config+0xd8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a25      	ldr	r2, [pc, #148]	; (80006d4 <SystemClock_Config+0xd8>)
 800063e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <SystemClock_Config+0xd8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000664:	2308      	movs	r3, #8
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000668:	23d8      	movs	r3, #216	; 0xd8
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000674:	2302      	movs	r3, #2
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fc37 	bl	8000ef0 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000688:	f000 f826 	bl	80006d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800068c:	f000 fbe0 	bl	8000e50 <HAL_PWREx_EnableOverDrive>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000696:	f000 f81f 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	2107      	movs	r1, #7
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fec7 	bl	800144c <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006c4:	f000 f808 	bl	80006d8 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	; 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x44>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <HAL_MspInit+0x44>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	6413      	str	r3, [r2, #64]	; 0x40
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_MspInit+0x44>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_MspInit+0x44>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_MspInit+0x44>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070c:	6453      	str	r3, [r2, #68]	; 0x44
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x44>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <NMI_Handler+0x4>

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 f87a 	bl	8000870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <SystemInit+0x20>)
 8000786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078a:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <SystemInit+0x20>)
 800078c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007aa:	490e      	ldr	r1, [pc, #56]	; (80007e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007ac:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007c0:	4c0b      	ldr	r4, [pc, #44]	; (80007f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007ce:	f7ff ffd7 	bl	8000780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d2:	f000 fff5 	bl	80017c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007d6:	f7ff fedd 	bl	8000594 <main>
  bx  lr    
 80007da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e8:	08001840 	.word	0x08001840
  ldr r2, =_sbss
 80007ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f0:	20000030 	.word	0x20000030

080007f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC_IRQHandler>

080007f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fa:	2003      	movs	r0, #3
 80007fc:	f000 f92e 	bl	8000a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000800:	200f      	movs	r0, #15
 8000802:	f000 f805 	bl	8000810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000806:	f7ff ff6d 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	bd80      	pop	{r7, pc}

08000810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_InitTick+0x54>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_InitTick+0x58>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	fbb3 f3f1 	udiv	r3, r3, r1
 800082a:	fbb2 f3f3 	udiv	r3, r2, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f93b 	bl	8000aaa <HAL_SYSTICK_Config>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	e00e      	b.n	800085c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d80a      	bhi.n	800085a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000844:	2200      	movs	r2, #0
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800084c:	f000 f911 	bl	8000a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000850:	4a06      	ldr	r2, [pc, #24]	; (800086c <HAL_InitTick+0x5c>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000856:	2300      	movs	r3, #0
 8000858:	e000      	b.n	800085c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000000 	.word	0x20000000
 8000868:	20000008 	.word	0x20000008
 800086c:	20000004 	.word	0x20000004

08000870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_IncTick+0x20>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_IncTick+0x24>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4413      	add	r3, r2
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_IncTick+0x24>)
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008
 8000894:	2000002c 	.word	0x2000002c

08000898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return uwTick;
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <HAL_GetTick+0x14>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	2000002c 	.word	0x2000002c

080008b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b8:	f7ff ffee 	bl	8000898 <HAL_GetTick>
 80008bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008c8:	d005      	beq.n	80008d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_Delay+0x44>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4413      	add	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d6:	bf00      	nop
 80008d8:	f7ff ffde 	bl	8000898 <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f7      	bhi.n	80008d8 <HAL_Delay+0x28>
  {
  }
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000008 	.word	0x20000008

080008f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <__NVIC_SetPriorityGrouping+0x40>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	4313      	orrs	r3, r2
 8000924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <__NVIC_SetPriorityGrouping+0x40>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60d3      	str	r3, [r2, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00
 800093c:	05fa0000 	.word	0x05fa0000

08000940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <__NVIC_GetPriorityGrouping+0x18>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	f003 0307 	and.w	r3, r3, #7
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db0a      	blt.n	8000986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	490c      	ldr	r1, [pc, #48]	; (80009a8 <__NVIC_SetPriority+0x4c>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	440b      	add	r3, r1
 8000980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000984:	e00a      	b.n	800099c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4908      	ldr	r1, [pc, #32]	; (80009ac <__NVIC_SetPriority+0x50>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	3b04      	subs	r3, #4
 8000994:	0112      	lsls	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	440b      	add	r3, r1
 800099a:	761a      	strb	r2, [r3, #24]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f1c3 0307 	rsb	r3, r3, #7
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	bf28      	it	cs
 80009ce:	2304      	movcs	r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3304      	adds	r3, #4
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d902      	bls.n	80009e0 <NVIC_EncodePriority+0x30>
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3b03      	subs	r3, #3
 80009de:	e000      	b.n	80009e2 <NVIC_EncodePriority+0x32>
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43da      	mvns	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43d9      	mvns	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	4313      	orrs	r3, r2
         );
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3724      	adds	r7, #36	; 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a28:	d301      	bcc.n	8000a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00f      	b.n	8000a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <SysTick_Config+0x40>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a36:	210f      	movs	r1, #15
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a3c:	f7ff ff8e 	bl	800095c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <SysTick_Config+0x40>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SysTick_Config+0x40>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	e000e010 	.word	0xe000e010

08000a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff47 	bl	80008f8 <__NVIC_SetPriorityGrouping>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a84:	f7ff ff5c 	bl	8000940 <__NVIC_GetPriorityGrouping>
 8000a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	f7ff ff8e 	bl	80009b0 <NVIC_EncodePriority>
 8000a94:	4602      	mov	r2, r0
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff5d 	bl	800095c <__NVIC_SetPriority>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffb0 	bl	8000a18 <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
 8000ae2:	e175      	b.n	8000dd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	f040 8164 	bne.w	8000dca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0303 	and.w	r3, r3, #3
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d005      	beq.n	8000b1a <HAL_GPIO_Init+0x56>
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d130      	bne.n	8000b7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	2203      	movs	r2, #3
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b50:	2201      	movs	r2, #1
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	091b      	lsrs	r3, r3, #4
 8000b66:	f003 0201 	and.w	r2, r3, #1
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	d017      	beq.n	8000bb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	2203      	movs	r2, #3
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d123      	bne.n	8000c0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	08da      	lsrs	r2, r3, #3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3208      	adds	r2, #8
 8000bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	220f      	movs	r2, #15
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	691a      	ldr	r2, [r3, #16]
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	08da      	lsrs	r2, r3, #3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3208      	adds	r2, #8
 8000c06:	69b9      	ldr	r1, [r7, #24]
 8000c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2203      	movs	r2, #3
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0203 	and.w	r2, r3, #3
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 80be 	beq.w	8000dca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b66      	ldr	r3, [pc, #408]	; (8000de8 <HAL_GPIO_Init+0x324>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a65      	ldr	r2, [pc, #404]	; (8000de8 <HAL_GPIO_Init+0x324>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <HAL_GPIO_Init+0x324>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c66:	4a61      	ldr	r2, [pc, #388]	; (8000dec <HAL_GPIO_Init+0x328>)
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4013      	ands	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a58      	ldr	r2, [pc, #352]	; (8000df0 <HAL_GPIO_Init+0x32c>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d037      	beq.n	8000d02 <HAL_GPIO_Init+0x23e>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a57      	ldr	r2, [pc, #348]	; (8000df4 <HAL_GPIO_Init+0x330>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d031      	beq.n	8000cfe <HAL_GPIO_Init+0x23a>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a56      	ldr	r2, [pc, #344]	; (8000df8 <HAL_GPIO_Init+0x334>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d02b      	beq.n	8000cfa <HAL_GPIO_Init+0x236>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a55      	ldr	r2, [pc, #340]	; (8000dfc <HAL_GPIO_Init+0x338>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d025      	beq.n	8000cf6 <HAL_GPIO_Init+0x232>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a54      	ldr	r2, [pc, #336]	; (8000e00 <HAL_GPIO_Init+0x33c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d01f      	beq.n	8000cf2 <HAL_GPIO_Init+0x22e>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a53      	ldr	r2, [pc, #332]	; (8000e04 <HAL_GPIO_Init+0x340>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d019      	beq.n	8000cee <HAL_GPIO_Init+0x22a>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a52      	ldr	r2, [pc, #328]	; (8000e08 <HAL_GPIO_Init+0x344>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d013      	beq.n	8000cea <HAL_GPIO_Init+0x226>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a51      	ldr	r2, [pc, #324]	; (8000e0c <HAL_GPIO_Init+0x348>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d00d      	beq.n	8000ce6 <HAL_GPIO_Init+0x222>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a50      	ldr	r2, [pc, #320]	; (8000e10 <HAL_GPIO_Init+0x34c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d007      	beq.n	8000ce2 <HAL_GPIO_Init+0x21e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a4f      	ldr	r2, [pc, #316]	; (8000e14 <HAL_GPIO_Init+0x350>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d101      	bne.n	8000cde <HAL_GPIO_Init+0x21a>
 8000cda:	2309      	movs	r3, #9
 8000cdc:	e012      	b.n	8000d04 <HAL_GPIO_Init+0x240>
 8000cde:	230a      	movs	r3, #10
 8000ce0:	e010      	b.n	8000d04 <HAL_GPIO_Init+0x240>
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	e00e      	b.n	8000d04 <HAL_GPIO_Init+0x240>
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	e00c      	b.n	8000d04 <HAL_GPIO_Init+0x240>
 8000cea:	2306      	movs	r3, #6
 8000cec:	e00a      	b.n	8000d04 <HAL_GPIO_Init+0x240>
 8000cee:	2305      	movs	r3, #5
 8000cf0:	e008      	b.n	8000d04 <HAL_GPIO_Init+0x240>
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	e006      	b.n	8000d04 <HAL_GPIO_Init+0x240>
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e004      	b.n	8000d04 <HAL_GPIO_Init+0x240>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e002      	b.n	8000d04 <HAL_GPIO_Init+0x240>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <HAL_GPIO_Init+0x240>
 8000d02:	2300      	movs	r3, #0
 8000d04:	69fa      	ldr	r2, [r7, #28]
 8000d06:	f002 0203 	and.w	r2, r2, #3
 8000d0a:	0092      	lsls	r2, r2, #2
 8000d0c:	4093      	lsls	r3, r2
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d14:	4935      	ldr	r1, [pc, #212]	; (8000dec <HAL_GPIO_Init+0x328>)
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d22:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <HAL_GPIO_Init+0x354>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d46:	4a34      	ldr	r2, [pc, #208]	; (8000e18 <HAL_GPIO_Init+0x354>)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d4c:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <HAL_GPIO_Init+0x354>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d70:	4a29      	ldr	r2, [pc, #164]	; (8000e18 <HAL_GPIO_Init+0x354>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d76:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <HAL_GPIO_Init+0x354>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d9a:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <HAL_GPIO_Init+0x354>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_GPIO_Init+0x354>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <HAL_GPIO_Init+0x354>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	f67f ae86 	bls.w	8000ae4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40013800 	.word	0x40013800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40020400 	.word	0x40020400
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020c00 	.word	0x40020c00
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40021400 	.word	0x40021400
 8000e08:	40021800 	.word	0x40021800
 8000e0c:	40021c00 	.word	0x40021c00
 8000e10:	40022000 	.word	0x40022000
 8000e14:	40022400 	.word	0x40022400
 8000e18:	40013c00 	.word	0x40013c00

08000e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e2c:	787b      	ldrb	r3, [r7, #1]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e32:	887a      	ldrh	r2, [r7, #2]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000e38:	e003      	b.n	8000e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	041a      	lsls	r2, r3, #16
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	619a      	str	r2, [r3, #24]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e7e:	f7ff fd0b 	bl	8000898 <HAL_GetTick>
 8000e82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e84:	e009      	b.n	8000e9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e86:	f7ff fd07 	bl	8000898 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e94:	d901      	bls.n	8000e9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e022      	b.n	8000ee0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea6:	d1ee      	bne.n	8000e86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8000eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb4:	f7ff fcf0 	bl	8000898 <HAL_GetTick>
 8000eb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000eba:	e009      	b.n	8000ed0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ebc:	f7ff fcec 	bl	8000898 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eca:	d901      	bls.n	8000ed0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e007      	b.n	8000ee0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000edc:	d1ee      	bne.n	8000ebc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40007000 	.word	0x40007000

08000ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e29b      	b.n	800143e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8087 	beq.w	8001022 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f14:	4b96      	ldr	r3, [pc, #600]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d00c      	beq.n	8000f3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f20:	4b93      	ldr	r3, [pc, #588]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d112      	bne.n	8000f52 <HAL_RCC_OscConfig+0x62>
 8000f2c:	4b90      	ldr	r3, [pc, #576]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f38:	d10b      	bne.n	8000f52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3a:	4b8d      	ldr	r3, [pc, #564]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d06c      	beq.n	8001020 <HAL_RCC_OscConfig+0x130>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d168      	bne.n	8001020 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e275      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5a:	d106      	bne.n	8000f6a <HAL_RCC_OscConfig+0x7a>
 8000f5c:	4b84      	ldr	r3, [pc, #528]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a83      	ldr	r2, [pc, #524]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e02e      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd8>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x9c>
 8000f72:	4b7f      	ldr	r3, [pc, #508]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a7e      	ldr	r2, [pc, #504]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b7c      	ldr	r3, [pc, #496]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a7b      	ldr	r2, [pc, #492]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e01d      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd8>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0xc0>
 8000f96:	4b76      	ldr	r3, [pc, #472]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a75      	ldr	r2, [pc, #468]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b73      	ldr	r3, [pc, #460]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a72      	ldr	r2, [pc, #456]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e00b      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd8>
 8000fb0:	4b6f      	ldr	r3, [pc, #444]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a6e      	ldr	r2, [pc, #440]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b6c      	ldr	r3, [pc, #432]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a6b      	ldr	r2, [pc, #428]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d013      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fc62 	bl	8000898 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fc5e 	bl	8000898 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e229      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	4b61      	ldr	r3, [pc, #388]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f0      	beq.n	8000fd8 <HAL_RCC_OscConfig+0xe8>
 8000ff6:	e014      	b.n	8001022 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fc4e 	bl	8000898 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fc4a 	bl	8000898 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e215      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	4b57      	ldr	r3, [pc, #348]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x110>
 800101e:	e000      	b.n	8001022 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d069      	beq.n	8001102 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800102e:	4b50      	ldr	r3, [pc, #320]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800103a:	4b4d      	ldr	r3, [pc, #308]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b08      	cmp	r3, #8
 8001044:	d11c      	bne.n	8001080 <HAL_RCC_OscConfig+0x190>
 8001046:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d116      	bne.n	8001080 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	4b47      	ldr	r3, [pc, #284]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <HAL_RCC_OscConfig+0x17a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d001      	beq.n	800106a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e1e9      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	493d      	ldr	r1, [pc, #244]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	e040      	b.n	8001102 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d023      	beq.n	80010d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001088:	4b39      	ldr	r3, [pc, #228]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a38      	ldr	r2, [pc, #224]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001094:	f7ff fc00 	bl	8000898 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109c:	f7ff fbfc 	bl	8000898 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e1c7      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ae:	4b30      	ldr	r3, [pc, #192]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4929      	ldr	r1, [pc, #164]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]
 80010ce:	e018      	b.n	8001102 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a26      	ldr	r2, [pc, #152]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 80010d6:	f023 0301 	bic.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fbdc 	bl	8000898 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e4:	f7ff fbd8 	bl	8000898 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e1a3      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	d038      	beq.n	8001180 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d019      	beq.n	800114a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8001118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001122:	f7ff fbb9 	bl	8000898 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800112a:	f7ff fbb5 	bl	8000898 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e180      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 800113e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x23a>
 8001148:	e01a      	b.n	8001180 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 800114c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_RCC_OscConfig+0x280>)
 8001150:	f023 0301 	bic.w	r3, r3, #1
 8001154:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001156:	f7ff fb9f 	bl	8000898 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115c:	e00a      	b.n	8001174 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115e:	f7ff fb9b 	bl	8000898 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d903      	bls.n	8001174 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e166      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
 8001170:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001174:	4b92      	ldr	r3, [pc, #584]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1ee      	bne.n	800115e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80a4 	beq.w	80012d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118e:	4b8c      	ldr	r3, [pc, #560]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10d      	bne.n	80011b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b89      	ldr	r3, [pc, #548]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a88      	ldr	r2, [pc, #544]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b86      	ldr	r3, [pc, #536]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b2:	2301      	movs	r3, #1
 80011b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b6:	4b83      	ldr	r3, [pc, #524]	; (80013c4 <HAL_RCC_OscConfig+0x4d4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d118      	bne.n	80011f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80011c2:	4b80      	ldr	r3, [pc, #512]	; (80013c4 <HAL_RCC_OscConfig+0x4d4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a7f      	ldr	r2, [pc, #508]	; (80013c4 <HAL_RCC_OscConfig+0x4d4>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fb63 	bl	8000898 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d6:	f7ff fb5f 	bl	8000898 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b64      	cmp	r3, #100	; 0x64
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e12a      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e8:	4b76      	ldr	r3, [pc, #472]	; (80013c4 <HAL_RCC_OscConfig+0x4d4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x31a>
 80011fc:	4b70      	ldr	r3, [pc, #448]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001200:	4a6f      	ldr	r2, [pc, #444]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6713      	str	r3, [r2, #112]	; 0x70
 8001208:	e02d      	b.n	8001266 <HAL_RCC_OscConfig+0x376>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x33c>
 8001212:	4b6b      	ldr	r3, [pc, #428]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001216:	4a6a      	ldr	r2, [pc, #424]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6713      	str	r3, [r2, #112]	; 0x70
 800121e:	4b68      	ldr	r3, [pc, #416]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001222:	4a67      	ldr	r2, [pc, #412]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	6713      	str	r3, [r2, #112]	; 0x70
 800122a:	e01c      	b.n	8001266 <HAL_RCC_OscConfig+0x376>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d10c      	bne.n	800124e <HAL_RCC_OscConfig+0x35e>
 8001234:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001238:	4a61      	ldr	r2, [pc, #388]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6713      	str	r3, [r2, #112]	; 0x70
 8001240:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001244:	4a5e      	ldr	r2, [pc, #376]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6713      	str	r3, [r2, #112]	; 0x70
 800124c:	e00b      	b.n	8001266 <HAL_RCC_OscConfig+0x376>
 800124e:	4b5c      	ldr	r3, [pc, #368]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001252:	4a5b      	ldr	r2, [pc, #364]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6713      	str	r3, [r2, #112]	; 0x70
 800125a:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125e:	4a58      	ldr	r2, [pc, #352]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001260:	f023 0304 	bic.w	r3, r3, #4
 8001264:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d015      	beq.n	800129a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126e:	f7ff fb13 	bl	8000898 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff fb0f 	bl	8000898 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f241 3288 	movw	r2, #5000	; 0x1388
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e0d8      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 800128e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ee      	beq.n	8001276 <HAL_RCC_OscConfig+0x386>
 8001298:	e014      	b.n	80012c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129a:	f7ff fafd 	bl	8000898 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff faf9 	bl	8000898 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e0c2      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b8:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 80012ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ee      	bne.n	80012a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d105      	bne.n	80012d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ca:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a3c      	ldr	r2, [pc, #240]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 80012d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 80ae 	beq.w	800143c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e0:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d06d      	beq.n	80013c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d14b      	bne.n	800138c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f4:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 80012fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff faca 	bl	8000898 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001308:	f7ff fac6 	bl	8000898 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e091      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69da      	ldr	r2, [r3, #28]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	019b      	lsls	r3, r3, #6
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133c:	085b      	lsrs	r3, r3, #1
 800133e:	3b01      	subs	r3, #1
 8001340:	041b      	lsls	r3, r3, #16
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	061b      	lsls	r3, r3, #24
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	071b      	lsls	r3, r3, #28
 8001352:	491b      	ldr	r1, [pc, #108]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 800135e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff fa98 	bl	8000898 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff fa94 	bl	8000898 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e05f      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x47c>
 800138a:	e057      	b.n	800143c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 8001392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fa7e 	bl	8000898 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff fa7a 	bl	8000898 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e045      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b2:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_RCC_OscConfig+0x4d0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x4b0>
 80013be:	e03d      	b.n	800143c <HAL_RCC_OscConfig+0x54c>
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <HAL_RCC_OscConfig+0x558>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d030      	beq.n	8001438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d129      	bne.n	8001438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d122      	bne.n	8001438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013f8:	4013      	ands	r3, r2
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001400:	4293      	cmp	r3, r2
 8001402:	d119      	bne.n	8001438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	085b      	lsrs	r3, r3, #1
 8001410:	3b01      	subs	r3, #1
 8001412:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001414:	429a      	cmp	r2, r3
 8001416:	d10f      	bne.n	8001438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001424:	429a      	cmp	r2, r3
 8001426:	d107      	bne.n	8001438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0d0      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001464:	4b6a      	ldr	r3, [pc, #424]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d910      	bls.n	8001494 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b67      	ldr	r3, [pc, #412]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 020f 	bic.w	r2, r3, #15
 800147a:	4965      	ldr	r1, [pc, #404]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b63      	ldr	r3, [pc, #396]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0b8      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ac:	4b59      	ldr	r3, [pc, #356]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a58      	ldr	r2, [pc, #352]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80014b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c4:	4b53      	ldr	r3, [pc, #332]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a52      	ldr	r2, [pc, #328]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80014ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d0:	4b50      	ldr	r3, [pc, #320]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	494d      	ldr	r1, [pc, #308]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d040      	beq.n	8001570 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b47      	ldr	r3, [pc, #284]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d115      	bne.n	800152e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e07f      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150e:	4b41      	ldr	r3, [pc, #260]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e073      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151e:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e06b      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f023 0203 	bic.w	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4936      	ldr	r1, [pc, #216]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 800153c:	4313      	orrs	r3, r2
 800153e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001540:	f7ff f9aa 	bl	8000898 <HAL_GetTick>
 8001544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	e00a      	b.n	800155e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001548:	f7ff f9a6 	bl	8000898 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	; 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e053      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 020c 	and.w	r2, r3, #12
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	429a      	cmp	r2, r3
 800156e:	d1eb      	bne.n	8001548 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d210      	bcs.n	80015a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b24      	ldr	r3, [pc, #144]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 020f 	bic.w	r2, r3, #15
 8001586:	4922      	ldr	r1, [pc, #136]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e032      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4916      	ldr	r1, [pc, #88]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d009      	beq.n	80015de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	490e      	ldr	r1, [pc, #56]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015de:	f000 f821 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	490a      	ldr	r1, [pc, #40]	; (8001618 <HAL_RCC_ClockConfig+0x1cc>)
 80015f0:	5ccb      	ldrb	r3, [r1, r3]
 80015f2:	fa22 f303 	lsr.w	r3, r2, r3
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <HAL_RCC_ClockConfig+0x1d0>)
 80015f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_RCC_ClockConfig+0x1d4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff f906 	bl	8000810 <HAL_InitTick>

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023c00 	.word	0x40023c00
 8001614:	40023800 	.word	0x40023800
 8001618:	08001820 	.word	0x08001820
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001628:	b090      	sub	sp, #64	; 0x40
 800162a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
 8001630:	2300      	movs	r3, #0
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800163c:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d00d      	beq.n	8001664 <HAL_RCC_GetSysClockFreq+0x40>
 8001648:	2b08      	cmp	r3, #8
 800164a:	f200 80a1 	bhi.w	8001790 <HAL_RCC_GetSysClockFreq+0x16c>
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0x34>
 8001652:	2b04      	cmp	r3, #4
 8001654:	d003      	beq.n	800165e <HAL_RCC_GetSysClockFreq+0x3a>
 8001656:	e09b      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800165c:	e09b      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800165e:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001662:	e098      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001664:	4b4f      	ldr	r3, [pc, #316]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800166e:	4b4d      	ldr	r3, [pc, #308]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d028      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167a:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	099b      	lsrs	r3, r3, #6
 8001680:	2200      	movs	r2, #0
 8001682:	623b      	str	r3, [r7, #32]
 8001684:	627a      	str	r2, [r7, #36]	; 0x24
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800168c:	2100      	movs	r1, #0
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001690:	fb03 f201 	mul.w	r2, r3, r1
 8001694:	2300      	movs	r3, #0
 8001696:	fb00 f303 	mul.w	r3, r0, r3
 800169a:	4413      	add	r3, r2
 800169c:	4a43      	ldr	r2, [pc, #268]	; (80017ac <HAL_RCC_GetSysClockFreq+0x188>)
 800169e:	fba0 1202 	umull	r1, r2, r0, r2
 80016a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016a4:	460a      	mov	r2, r1
 80016a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80016a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016aa:	4413      	add	r3, r2
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b0:	2200      	movs	r2, #0
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	61fa      	str	r2, [r7, #28]
 80016b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016be:	f7fe fdbb 	bl	8000238 <__aeabi_uldivmod>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4613      	mov	r3, r2
 80016c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ca:	e053      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016cc:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	2200      	movs	r2, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	617a      	str	r2, [r7, #20]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016de:	f04f 0b00 	mov.w	fp, #0
 80016e2:	4652      	mov	r2, sl
 80016e4:	465b      	mov	r3, fp
 80016e6:	f04f 0000 	mov.w	r0, #0
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	0159      	lsls	r1, r3, #5
 80016f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016f4:	0150      	lsls	r0, r2, #5
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	ebb2 080a 	subs.w	r8, r2, sl
 80016fe:	eb63 090b 	sbc.w	r9, r3, fp
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800170e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001712:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001716:	ebb2 0408 	subs.w	r4, r2, r8
 800171a:	eb63 0509 	sbc.w	r5, r3, r9
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	00eb      	lsls	r3, r5, #3
 8001728:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800172c:	00e2      	lsls	r2, r4, #3
 800172e:	4614      	mov	r4, r2
 8001730:	461d      	mov	r5, r3
 8001732:	eb14 030a 	adds.w	r3, r4, sl
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	eb45 030b 	adc.w	r3, r5, fp
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800174a:	4629      	mov	r1, r5
 800174c:	028b      	lsls	r3, r1, #10
 800174e:	4621      	mov	r1, r4
 8001750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001754:	4621      	mov	r1, r4
 8001756:	028a      	lsls	r2, r1, #10
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175e:	2200      	movs	r2, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	60fa      	str	r2, [r7, #12]
 8001764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001768:	f7fe fd66 	bl	8000238 <__aeabi_uldivmod>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4613      	mov	r3, r2
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	0c1b      	lsrs	r3, r3, #16
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	3301      	adds	r3, #1
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001788:	fbb2 f3f3 	udiv	r3, r2, r3
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800178e:	e002      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001792:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001798:	4618      	mov	r0, r3
 800179a:	3740      	adds	r7, #64	; 0x40
 800179c:	46bd      	mov	sp, r7
 800179e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	00f42400 	.word	0x00f42400
 80017ac:	017d7840 	.word	0x017d7840

080017b0 <memset>:
 80017b0:	4402      	add	r2, r0
 80017b2:	4603      	mov	r3, r0
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d100      	bne.n	80017ba <memset+0xa>
 80017b8:	4770      	bx	lr
 80017ba:	f803 1b01 	strb.w	r1, [r3], #1
 80017be:	e7f9      	b.n	80017b4 <memset+0x4>

080017c0 <__libc_init_array>:
 80017c0:	b570      	push	{r4, r5, r6, lr}
 80017c2:	4d0d      	ldr	r5, [pc, #52]	; (80017f8 <__libc_init_array+0x38>)
 80017c4:	4c0d      	ldr	r4, [pc, #52]	; (80017fc <__libc_init_array+0x3c>)
 80017c6:	1b64      	subs	r4, r4, r5
 80017c8:	10a4      	asrs	r4, r4, #2
 80017ca:	2600      	movs	r6, #0
 80017cc:	42a6      	cmp	r6, r4
 80017ce:	d109      	bne.n	80017e4 <__libc_init_array+0x24>
 80017d0:	4d0b      	ldr	r5, [pc, #44]	; (8001800 <__libc_init_array+0x40>)
 80017d2:	4c0c      	ldr	r4, [pc, #48]	; (8001804 <__libc_init_array+0x44>)
 80017d4:	f000 f818 	bl	8001808 <_init>
 80017d8:	1b64      	subs	r4, r4, r5
 80017da:	10a4      	asrs	r4, r4, #2
 80017dc:	2600      	movs	r6, #0
 80017de:	42a6      	cmp	r6, r4
 80017e0:	d105      	bne.n	80017ee <__libc_init_array+0x2e>
 80017e2:	bd70      	pop	{r4, r5, r6, pc}
 80017e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80017e8:	4798      	blx	r3
 80017ea:	3601      	adds	r6, #1
 80017ec:	e7ee      	b.n	80017cc <__libc_init_array+0xc>
 80017ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80017f2:	4798      	blx	r3
 80017f4:	3601      	adds	r6, #1
 80017f6:	e7f2      	b.n	80017de <__libc_init_array+0x1e>
 80017f8:	08001838 	.word	0x08001838
 80017fc:	08001838 	.word	0x08001838
 8001800:	08001838 	.word	0x08001838
 8001804:	0800183c 	.word	0x0800183c

08001808 <_init>:
 8001808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180a:	bf00      	nop
 800180c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800180e:	bc08      	pop	{r3}
 8001810:	469e      	mov	lr, r3
 8001812:	4770      	bx	lr

08001814 <_fini>:
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001816:	bf00      	nop
 8001818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800181a:	bc08      	pop	{r3}
 800181c:	469e      	mov	lr, r3
 800181e:	4770      	bx	lr
